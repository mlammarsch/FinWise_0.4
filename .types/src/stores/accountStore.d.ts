/**
 * Pfad: src/stores/accountStore.ts
 * Speichert Konten & Gruppen â€“ jetzt tenant-spezifisch.
 */
import type { Account, AccountGroup } from '@/types';
export declare const useAccountStore: import("pinia").StoreDefinition<"account", Pick<{
    accounts: import("vue").Ref<{
        id: string;
        name: string;
        description?: string | undefined;
        note?: string | undefined;
        accountType: import("@/types").AccountType;
        isActive: boolean;
        isOfflineBudget: boolean;
        accountGroupId: string;
        sortOrder: number;
        iban?: string | undefined;
        balance: number;
        creditLimit?: number | undefined;
        offset: number;
        logo_path: string | null;
        updatedAt?: string | undefined;
    }[], Account[] | {
        id: string;
        name: string;
        description?: string | undefined;
        note?: string | undefined;
        accountType: import("@/types").AccountType;
        isActive: boolean;
        isOfflineBudget: boolean;
        accountGroupId: string;
        sortOrder: number;
        iban?: string | undefined;
        balance: number;
        creditLimit?: number | undefined;
        offset: number;
        logo_path: string | null;
        updatedAt?: string | undefined;
    }[]>;
    accountGroups: import("vue").Ref<{
        id: string;
        name: string;
        sortOrder: number;
        logo_path: string | null;
        updatedAt?: string | undefined;
    }[], AccountGroup[] | {
        id: string;
        name: string;
        sortOrder: number;
        logo_path: string | null;
        updatedAt?: string | undefined;
    }[]>;
    activeAccounts: import("vue").ComputedRef<{
        id: string;
        name: string;
        description?: string | undefined;
        note?: string | undefined;
        accountType: import("@/types").AccountType;
        isActive: boolean;
        isOfflineBudget: boolean;
        accountGroupId: string;
        sortOrder: number;
        iban?: string | undefined;
        balance: number;
        creditLimit?: number | undefined;
        offset: number;
        logo_path: string | null;
        updatedAt?: string | undefined;
    }[]>;
    isLoading: import("vue").Ref<boolean, boolean>;
    isLoaded: import("vue").Ref<boolean, boolean>;
    getAccountById: (id: string) => {
        id: string;
        name: string;
        description?: string | undefined;
        note?: string | undefined;
        accountType: import("@/types").AccountType;
        isActive: boolean;
        isOfflineBudget: boolean;
        accountGroupId: string;
        sortOrder: number;
        iban?: string | undefined;
        balance: number;
        creditLimit?: number | undefined;
        offset: number;
        logo_path: string | null;
        updatedAt?: string | undefined;
    } | undefined;
    getAccountGroupById: import("vue").ComputedRef<(id: string) => {
        id: string;
        name: string;
        sortOrder: number;
        logo_path: string | null;
        updatedAt?: string | undefined;
    } | undefined>;
    addAccount: (accountData: Omit<Account, "updated_at"> | Account, fromSync?: boolean) => Promise<Account>;
    updateAccount: (accountUpdatesData: Account, fromSync?: boolean) => Promise<boolean>;
    deleteAccount: (accountId: string, fromSync?: boolean) => Promise<void>;
    addAccountGroup: (accountGroupData: Omit<AccountGroup, "updated_at" | "sortOrder"> | AccountGroup, fromSync?: boolean) => Promise<AccountGroup>;
    updateAccountGroup: (accountGroupUpdatesData: AccountGroup, fromSync?: boolean) => Promise<boolean>;
    deleteAccountGroup: (accountGroupId: string, fromSync?: boolean) => Promise<boolean>;
    updateAccountLogo: (accountId: string, newLogoPath: string | null) => Promise<void>;
    updateAccountGroupLogo: (accountGroupId: string, newLogoPath: string | null) => Promise<void>;
    loadAccounts: () => Promise<void>;
    reset: () => Promise<void>;
    initializeStore: () => Promise<void>;
}, "isLoading" | "isLoaded" | "accounts" | "accountGroups">, Pick<{
    accounts: import("vue").Ref<{
        id: string;
        name: string;
        description?: string | undefined;
        note?: string | undefined;
        accountType: import("@/types").AccountType;
        isActive: boolean;
        isOfflineBudget: boolean;
        accountGroupId: string;
        sortOrder: number;
        iban?: string | undefined;
        balance: number;
        creditLimit?: number | undefined;
        offset: number;
        logo_path: string | null;
        updatedAt?: string | undefined;
    }[], Account[] | {
        id: string;
        name: string;
        description?: string | undefined;
        note?: string | undefined;
        accountType: import("@/types").AccountType;
        isActive: boolean;
        isOfflineBudget: boolean;
        accountGroupId: string;
        sortOrder: number;
        iban?: string | undefined;
        balance: number;
        creditLimit?: number | undefined;
        offset: number;
        logo_path: string | null;
        updatedAt?: string | undefined;
    }[]>;
    accountGroups: import("vue").Ref<{
        id: string;
        name: string;
        sortOrder: number;
        logo_path: string | null;
        updatedAt?: string | undefined;
    }[], AccountGroup[] | {
        id: string;
        name: string;
        sortOrder: number;
        logo_path: string | null;
        updatedAt?: string | undefined;
    }[]>;
    activeAccounts: import("vue").ComputedRef<{
        id: string;
        name: string;
        description?: string | undefined;
        note?: string | undefined;
        accountType: import("@/types").AccountType;
        isActive: boolean;
        isOfflineBudget: boolean;
        accountGroupId: string;
        sortOrder: number;
        iban?: string | undefined;
        balance: number;
        creditLimit?: number | undefined;
        offset: number;
        logo_path: string | null;
        updatedAt?: string | undefined;
    }[]>;
    isLoading: import("vue").Ref<boolean, boolean>;
    isLoaded: import("vue").Ref<boolean, boolean>;
    getAccountById: (id: string) => {
        id: string;
        name: string;
        description?: string | undefined;
        note?: string | undefined;
        accountType: import("@/types").AccountType;
        isActive: boolean;
        isOfflineBudget: boolean;
        accountGroupId: string;
        sortOrder: number;
        iban?: string | undefined;
        balance: number;
        creditLimit?: number | undefined;
        offset: number;
        logo_path: string | null;
        updatedAt?: string | undefined;
    } | undefined;
    getAccountGroupById: import("vue").ComputedRef<(id: string) => {
        id: string;
        name: string;
        sortOrder: number;
        logo_path: string | null;
        updatedAt?: string | undefined;
    } | undefined>;
    addAccount: (accountData: Omit<Account, "updated_at"> | Account, fromSync?: boolean) => Promise<Account>;
    updateAccount: (accountUpdatesData: Account, fromSync?: boolean) => Promise<boolean>;
    deleteAccount: (accountId: string, fromSync?: boolean) => Promise<void>;
    addAccountGroup: (accountGroupData: Omit<AccountGroup, "updated_at" | "sortOrder"> | AccountGroup, fromSync?: boolean) => Promise<AccountGroup>;
    updateAccountGroup: (accountGroupUpdatesData: AccountGroup, fromSync?: boolean) => Promise<boolean>;
    deleteAccountGroup: (accountGroupId: string, fromSync?: boolean) => Promise<boolean>;
    updateAccountLogo: (accountId: string, newLogoPath: string | null) => Promise<void>;
    updateAccountGroupLogo: (accountGroupId: string, newLogoPath: string | null) => Promise<void>;
    loadAccounts: () => Promise<void>;
    reset: () => Promise<void>;
    initializeStore: () => Promise<void>;
}, "activeAccounts" | "getAccountGroupById">, Pick<{
    accounts: import("vue").Ref<{
        id: string;
        name: string;
        description?: string | undefined;
        note?: string | undefined;
        accountType: import("@/types").AccountType;
        isActive: boolean;
        isOfflineBudget: boolean;
        accountGroupId: string;
        sortOrder: number;
        iban?: string | undefined;
        balance: number;
        creditLimit?: number | undefined;
        offset: number;
        logo_path: string | null;
        updatedAt?: string | undefined;
    }[], Account[] | {
        id: string;
        name: string;
        description?: string | undefined;
        note?: string | undefined;
        accountType: import("@/types").AccountType;
        isActive: boolean;
        isOfflineBudget: boolean;
        accountGroupId: string;
        sortOrder: number;
        iban?: string | undefined;
        balance: number;
        creditLimit?: number | undefined;
        offset: number;
        logo_path: string | null;
        updatedAt?: string | undefined;
    }[]>;
    accountGroups: import("vue").Ref<{
        id: string;
        name: string;
        sortOrder: number;
        logo_path: string | null;
        updatedAt?: string | undefined;
    }[], AccountGroup[] | {
        id: string;
        name: string;
        sortOrder: number;
        logo_path: string | null;
        updatedAt?: string | undefined;
    }[]>;
    activeAccounts: import("vue").ComputedRef<{
        id: string;
        name: string;
        description?: string | undefined;
        note?: string | undefined;
        accountType: import("@/types").AccountType;
        isActive: boolean;
        isOfflineBudget: boolean;
        accountGroupId: string;
        sortOrder: number;
        iban?: string | undefined;
        balance: number;
        creditLimit?: number | undefined;
        offset: number;
        logo_path: string | null;
        updatedAt?: string | undefined;
    }[]>;
    isLoading: import("vue").Ref<boolean, boolean>;
    isLoaded: import("vue").Ref<boolean, boolean>;
    getAccountById: (id: string) => {
        id: string;
        name: string;
        description?: string | undefined;
        note?: string | undefined;
        accountType: import("@/types").AccountType;
        isActive: boolean;
        isOfflineBudget: boolean;
        accountGroupId: string;
        sortOrder: number;
        iban?: string | undefined;
        balance: number;
        creditLimit?: number | undefined;
        offset: number;
        logo_path: string | null;
        updatedAt?: string | undefined;
    } | undefined;
    getAccountGroupById: import("vue").ComputedRef<(id: string) => {
        id: string;
        name: string;
        sortOrder: number;
        logo_path: string | null;
        updatedAt?: string | undefined;
    } | undefined>;
    addAccount: (accountData: Omit<Account, "updated_at"> | Account, fromSync?: boolean) => Promise<Account>;
    updateAccount: (accountUpdatesData: Account, fromSync?: boolean) => Promise<boolean>;
    deleteAccount: (accountId: string, fromSync?: boolean) => Promise<void>;
    addAccountGroup: (accountGroupData: Omit<AccountGroup, "updated_at" | "sortOrder"> | AccountGroup, fromSync?: boolean) => Promise<AccountGroup>;
    updateAccountGroup: (accountGroupUpdatesData: AccountGroup, fromSync?: boolean) => Promise<boolean>;
    deleteAccountGroup: (accountGroupId: string, fromSync?: boolean) => Promise<boolean>;
    updateAccountLogo: (accountId: string, newLogoPath: string | null) => Promise<void>;
    updateAccountGroupLogo: (accountGroupId: string, newLogoPath: string | null) => Promise<void>;
    loadAccounts: () => Promise<void>;
    reset: () => Promise<void>;
    initializeStore: () => Promise<void>;
}, "reset" | "initializeStore" | "getAccountById" | "addAccount" | "updateAccount" | "deleteAccount" | "addAccountGroup" | "updateAccountGroup" | "deleteAccountGroup" | "updateAccountLogo" | "updateAccountGroupLogo" | "loadAccounts">>;
