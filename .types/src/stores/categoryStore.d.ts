import type { Category, CategoryGroup } from '@/types';
export declare const useCategoryStore: import("pinia").StoreDefinition<"category", Pick<{
    categories: import("vue").Ref<{
        id: string;
        name: string;
        icon?: string | undefined;
        budgeted: number;
        activity: number;
        available: number;
        isIncomeCategory: boolean;
        isHidden: boolean;
        isActive: boolean;
        sortOrder: number;
        categoryGroupId?: string | undefined;
        parentCategoryId?: string | undefined;
        isSavingsGoal?: boolean | undefined;
        goalDate?: string | undefined;
        targetAmount?: number | undefined;
        priority?: number | undefined;
        proportion?: number | undefined;
        monthlyAmount?: number | undefined;
        note?: string | undefined;
        updatedAt?: string | undefined;
    }[], Category[] | {
        id: string;
        name: string;
        icon?: string | undefined;
        budgeted: number;
        activity: number;
        available: number;
        isIncomeCategory: boolean;
        isHidden: boolean;
        isActive: boolean;
        sortOrder: number;
        categoryGroupId?: string | undefined;
        parentCategoryId?: string | undefined;
        isSavingsGoal?: boolean | undefined;
        goalDate?: string | undefined;
        targetAmount?: number | undefined;
        priority?: number | undefined;
        proportion?: number | undefined;
        monthlyAmount?: number | undefined;
        note?: string | undefined;
        updatedAt?: string | undefined;
    }[]>;
    categoryGroups: import("vue").Ref<{
        id: string;
        name: string;
        sortOrder: number;
        isIncomeGroup: boolean;
        updatedAt?: string | undefined;
    }[], CategoryGroup[] | {
        id: string;
        name: string;
        sortOrder: number;
        isIncomeGroup: boolean;
        updatedAt?: string | undefined;
    }[]>;
    expandedCategories: import("vue").Ref<Set<string> & Omit<Set<string>, keyof Set<any>>, Set<string> | (Set<string> & Omit<Set<string>, keyof Set<any>>)>;
    expandedCategoryGroups: import("vue").Ref<Set<string> & Omit<Set<string>, keyof Set<any>>, Set<string> | (Set<string> & Omit<Set<string>, keyof Set<any>>)>;
    showHiddenCategories: import("vue").Ref<boolean, boolean>;
    isLoading: import("vue").Ref<boolean, boolean>;
    isLoaded: import("vue").Ref<boolean, boolean>;
    getCategoryById: import("vue").ComputedRef<(id: string) => {
        id: string;
        name: string;
        icon?: string | undefined;
        budgeted: number;
        activity: number;
        available: number;
        isIncomeCategory: boolean;
        isHidden: boolean;
        isActive: boolean;
        sortOrder: number;
        categoryGroupId?: string | undefined;
        parentCategoryId?: string | undefined;
        isSavingsGoal?: boolean | undefined;
        goalDate?: string | undefined;
        targetAmount?: number | undefined;
        priority?: number | undefined;
        proportion?: number | undefined;
        monthlyAmount?: number | undefined;
        note?: string | undefined;
        updatedAt?: string | undefined;
    } | undefined>;
    findCategoryById: (id: string) => {
        id: string;
        name: string;
        icon?: string | undefined;
        budgeted: number;
        activity: number;
        available: number;
        isIncomeCategory: boolean;
        isHidden: boolean;
        isActive: boolean;
        sortOrder: number;
        categoryGroupId?: string | undefined;
        parentCategoryId?: string | undefined;
        isSavingsGoal?: boolean | undefined;
        goalDate?: string | undefined;
        targetAmount?: number | undefined;
        priority?: number | undefined;
        proportion?: number | undefined;
        monthlyAmount?: number | undefined;
        note?: string | undefined;
        updatedAt?: string | undefined;
    } | undefined;
    getCategoriesByParentId: import("vue").ComputedRef<(parentId: string | null) => {
        id: string;
        name: string;
        icon?: string | undefined;
        budgeted: number;
        activity: number;
        available: number;
        isIncomeCategory: boolean;
        isHidden: boolean;
        isActive: boolean;
        sortOrder: number;
        categoryGroupId?: string | undefined;
        parentCategoryId?: string | undefined;
        isSavingsGoal?: boolean | undefined;
        goalDate?: string | undefined;
        targetAmount?: number | undefined;
        priority?: number | undefined;
        proportion?: number | undefined;
        monthlyAmount?: number | undefined;
        note?: string | undefined;
        updatedAt?: string | undefined;
    }[]>;
    getChildCategories: (parentId: string) => {
        id: string;
        name: string;
        icon?: string | undefined;
        budgeted: number;
        activity: number;
        available: number;
        isIncomeCategory: boolean;
        isHidden: boolean;
        isActive: boolean;
        sortOrder: number;
        categoryGroupId?: string | undefined;
        parentCategoryId?: string | undefined;
        isSavingsGoal?: boolean | undefined;
        goalDate?: string | undefined;
        targetAmount?: number | undefined;
        priority?: number | undefined;
        proportion?: number | undefined;
        monthlyAmount?: number | undefined;
        note?: string | undefined;
        updatedAt?: string | undefined;
    }[];
    rootCategories: import("vue").ComputedRef<{
        id: string;
        name: string;
        icon?: string | undefined;
        budgeted: number;
        activity: number;
        available: number;
        isIncomeCategory: boolean;
        isHidden: boolean;
        isActive: boolean;
        sortOrder: number;
        categoryGroupId?: string | undefined;
        parentCategoryId?: string | undefined;
        isSavingsGoal?: boolean | undefined;
        goalDate?: string | undefined;
        targetAmount?: number | undefined;
        priority?: number | undefined;
        proportion?: number | undefined;
        monthlyAmount?: number | undefined;
        note?: string | undefined;
        updatedAt?: string | undefined;
    }[]>;
    savingsGoals: import("vue").ComputedRef<{
        id: string;
        name: string;
        icon?: string | undefined;
        budgeted: number;
        activity: number;
        available: number;
        isIncomeCategory: boolean;
        isHidden: boolean;
        isActive: boolean;
        sortOrder: number;
        categoryGroupId?: string | undefined;
        parentCategoryId?: string | undefined;
        isSavingsGoal?: boolean | undefined;
        goalDate?: string | undefined;
        targetAmount?: number | undefined;
        priority?: number | undefined;
        proportion?: number | undefined;
        monthlyAmount?: number | undefined;
        note?: string | undefined;
        updatedAt?: string | undefined;
    }[]>;
    categoriesByGroup: import("vue").ComputedRef<Record<string, Category[]>>;
    activeCategories: import("vue").ComputedRef<{
        id: string;
        name: string;
        icon?: string | undefined;
        budgeted: number;
        activity: number;
        available: number;
        isIncomeCategory: boolean;
        isHidden: boolean;
        isActive: boolean;
        sortOrder: number;
        categoryGroupId?: string | undefined;
        parentCategoryId?: string | undefined;
        isSavingsGoal?: boolean | undefined;
        goalDate?: string | undefined;
        targetAmount?: number | undefined;
        priority?: number | undefined;
        proportion?: number | undefined;
        monthlyAmount?: number | undefined;
        note?: string | undefined;
        updatedAt?: string | undefined;
    }[]>;
    addCategory: (categoryData: Omit<Category, "id" | "updatedAt"> | Category, fromSync?: boolean) => Promise<Category>;
    addMultipleCategories: (categoriesToAdd: Category[], fromSync?: boolean) => Promise<Category[]>;
    updateCategory: (categoryUpdatesData: Category, fromSync?: boolean) => Promise<boolean>;
    deleteCategory: (categoryId: string, fromSync?: boolean) => Promise<void>;
    updateCategoryBalance: (id: string, amount: number) => Promise<boolean>;
    addCategoryGroup: (categoryGroupData: Omit<CategoryGroup, "id" | "updatedAt"> | CategoryGroup, fromSync?: boolean) => Promise<CategoryGroup>;
    addMultipleCategoryGroups: (categoryGroupsToAdd: CategoryGroup[], fromSync?: boolean) => Promise<CategoryGroup[]>;
    updateCategoryGroup: (categoryGroupUpdatesData: CategoryGroup, fromSync?: boolean) => Promise<boolean>;
    deleteCategoryGroup: (categoryGroupId: string, fromSync?: boolean) => Promise<boolean>;
    setMonthlySnapshot: () => Promise<void>;
    getAvailableFundsCategory: () => {
        id: string;
        name: string;
        icon?: string | undefined;
        budgeted: number;
        activity: number;
        available: number;
        isIncomeCategory: boolean;
        isHidden: boolean;
        isActive: boolean;
        sortOrder: number;
        categoryGroupId?: string | undefined;
        parentCategoryId?: string | undefined;
        isSavingsGoal?: boolean | undefined;
        goalDate?: string | undefined;
        targetAmount?: number | undefined;
        priority?: number | undefined;
        proportion?: number | undefined;
        monthlyAmount?: number | undefined;
        note?: string | undefined;
        updatedAt?: string | undefined;
    } | undefined;
    toggleCategoryExpanded: (id: string) => void;
    expandAllCategories: () => void;
    collapseAllCategories: () => void;
    toggleCategoryGroupExpanded: (id: string) => void;
    expandAllCategoryGroups: () => void;
    collapseAllCategoryGroups: () => void;
    expandCategoryGroupsBatch: (groupIds: string[]) => void;
    toggleShowHiddenCategories: () => void;
    setShowHiddenCategories: (show: boolean) => void;
    loadCategories: () => Promise<void>;
    reset: () => Promise<void>;
    initializeStore: () => Promise<void>;
}, "categories" | "categoryGroups" | "expandedCategories" | "expandedCategoryGroups" | "showHiddenCategories" | "isLoading" | "isLoaded">, Pick<{
    categories: import("vue").Ref<{
        id: string;
        name: string;
        icon?: string | undefined;
        budgeted: number;
        activity: number;
        available: number;
        isIncomeCategory: boolean;
        isHidden: boolean;
        isActive: boolean;
        sortOrder: number;
        categoryGroupId?: string | undefined;
        parentCategoryId?: string | undefined;
        isSavingsGoal?: boolean | undefined;
        goalDate?: string | undefined;
        targetAmount?: number | undefined;
        priority?: number | undefined;
        proportion?: number | undefined;
        monthlyAmount?: number | undefined;
        note?: string | undefined;
        updatedAt?: string | undefined;
    }[], Category[] | {
        id: string;
        name: string;
        icon?: string | undefined;
        budgeted: number;
        activity: number;
        available: number;
        isIncomeCategory: boolean;
        isHidden: boolean;
        isActive: boolean;
        sortOrder: number;
        categoryGroupId?: string | undefined;
        parentCategoryId?: string | undefined;
        isSavingsGoal?: boolean | undefined;
        goalDate?: string | undefined;
        targetAmount?: number | undefined;
        priority?: number | undefined;
        proportion?: number | undefined;
        monthlyAmount?: number | undefined;
        note?: string | undefined;
        updatedAt?: string | undefined;
    }[]>;
    categoryGroups: import("vue").Ref<{
        id: string;
        name: string;
        sortOrder: number;
        isIncomeGroup: boolean;
        updatedAt?: string | undefined;
    }[], CategoryGroup[] | {
        id: string;
        name: string;
        sortOrder: number;
        isIncomeGroup: boolean;
        updatedAt?: string | undefined;
    }[]>;
    expandedCategories: import("vue").Ref<Set<string> & Omit<Set<string>, keyof Set<any>>, Set<string> | (Set<string> & Omit<Set<string>, keyof Set<any>>)>;
    expandedCategoryGroups: import("vue").Ref<Set<string> & Omit<Set<string>, keyof Set<any>>, Set<string> | (Set<string> & Omit<Set<string>, keyof Set<any>>)>;
    showHiddenCategories: import("vue").Ref<boolean, boolean>;
    isLoading: import("vue").Ref<boolean, boolean>;
    isLoaded: import("vue").Ref<boolean, boolean>;
    getCategoryById: import("vue").ComputedRef<(id: string) => {
        id: string;
        name: string;
        icon?: string | undefined;
        budgeted: number;
        activity: number;
        available: number;
        isIncomeCategory: boolean;
        isHidden: boolean;
        isActive: boolean;
        sortOrder: number;
        categoryGroupId?: string | undefined;
        parentCategoryId?: string | undefined;
        isSavingsGoal?: boolean | undefined;
        goalDate?: string | undefined;
        targetAmount?: number | undefined;
        priority?: number | undefined;
        proportion?: number | undefined;
        monthlyAmount?: number | undefined;
        note?: string | undefined;
        updatedAt?: string | undefined;
    } | undefined>;
    findCategoryById: (id: string) => {
        id: string;
        name: string;
        icon?: string | undefined;
        budgeted: number;
        activity: number;
        available: number;
        isIncomeCategory: boolean;
        isHidden: boolean;
        isActive: boolean;
        sortOrder: number;
        categoryGroupId?: string | undefined;
        parentCategoryId?: string | undefined;
        isSavingsGoal?: boolean | undefined;
        goalDate?: string | undefined;
        targetAmount?: number | undefined;
        priority?: number | undefined;
        proportion?: number | undefined;
        monthlyAmount?: number | undefined;
        note?: string | undefined;
        updatedAt?: string | undefined;
    } | undefined;
    getCategoriesByParentId: import("vue").ComputedRef<(parentId: string | null) => {
        id: string;
        name: string;
        icon?: string | undefined;
        budgeted: number;
        activity: number;
        available: number;
        isIncomeCategory: boolean;
        isHidden: boolean;
        isActive: boolean;
        sortOrder: number;
        categoryGroupId?: string | undefined;
        parentCategoryId?: string | undefined;
        isSavingsGoal?: boolean | undefined;
        goalDate?: string | undefined;
        targetAmount?: number | undefined;
        priority?: number | undefined;
        proportion?: number | undefined;
        monthlyAmount?: number | undefined;
        note?: string | undefined;
        updatedAt?: string | undefined;
    }[]>;
    getChildCategories: (parentId: string) => {
        id: string;
        name: string;
        icon?: string | undefined;
        budgeted: number;
        activity: number;
        available: number;
        isIncomeCategory: boolean;
        isHidden: boolean;
        isActive: boolean;
        sortOrder: number;
        categoryGroupId?: string | undefined;
        parentCategoryId?: string | undefined;
        isSavingsGoal?: boolean | undefined;
        goalDate?: string | undefined;
        targetAmount?: number | undefined;
        priority?: number | undefined;
        proportion?: number | undefined;
        monthlyAmount?: number | undefined;
        note?: string | undefined;
        updatedAt?: string | undefined;
    }[];
    rootCategories: import("vue").ComputedRef<{
        id: string;
        name: string;
        icon?: string | undefined;
        budgeted: number;
        activity: number;
        available: number;
        isIncomeCategory: boolean;
        isHidden: boolean;
        isActive: boolean;
        sortOrder: number;
        categoryGroupId?: string | undefined;
        parentCategoryId?: string | undefined;
        isSavingsGoal?: boolean | undefined;
        goalDate?: string | undefined;
        targetAmount?: number | undefined;
        priority?: number | undefined;
        proportion?: number | undefined;
        monthlyAmount?: number | undefined;
        note?: string | undefined;
        updatedAt?: string | undefined;
    }[]>;
    savingsGoals: import("vue").ComputedRef<{
        id: string;
        name: string;
        icon?: string | undefined;
        budgeted: number;
        activity: number;
        available: number;
        isIncomeCategory: boolean;
        isHidden: boolean;
        isActive: boolean;
        sortOrder: number;
        categoryGroupId?: string | undefined;
        parentCategoryId?: string | undefined;
        isSavingsGoal?: boolean | undefined;
        goalDate?: string | undefined;
        targetAmount?: number | undefined;
        priority?: number | undefined;
        proportion?: number | undefined;
        monthlyAmount?: number | undefined;
        note?: string | undefined;
        updatedAt?: string | undefined;
    }[]>;
    categoriesByGroup: import("vue").ComputedRef<Record<string, Category[]>>;
    activeCategories: import("vue").ComputedRef<{
        id: string;
        name: string;
        icon?: string | undefined;
        budgeted: number;
        activity: number;
        available: number;
        isIncomeCategory: boolean;
        isHidden: boolean;
        isActive: boolean;
        sortOrder: number;
        categoryGroupId?: string | undefined;
        parentCategoryId?: string | undefined;
        isSavingsGoal?: boolean | undefined;
        goalDate?: string | undefined;
        targetAmount?: number | undefined;
        priority?: number | undefined;
        proportion?: number | undefined;
        monthlyAmount?: number | undefined;
        note?: string | undefined;
        updatedAt?: string | undefined;
    }[]>;
    addCategory: (categoryData: Omit<Category, "id" | "updatedAt"> | Category, fromSync?: boolean) => Promise<Category>;
    addMultipleCategories: (categoriesToAdd: Category[], fromSync?: boolean) => Promise<Category[]>;
    updateCategory: (categoryUpdatesData: Category, fromSync?: boolean) => Promise<boolean>;
    deleteCategory: (categoryId: string, fromSync?: boolean) => Promise<void>;
    updateCategoryBalance: (id: string, amount: number) => Promise<boolean>;
    addCategoryGroup: (categoryGroupData: Omit<CategoryGroup, "id" | "updatedAt"> | CategoryGroup, fromSync?: boolean) => Promise<CategoryGroup>;
    addMultipleCategoryGroups: (categoryGroupsToAdd: CategoryGroup[], fromSync?: boolean) => Promise<CategoryGroup[]>;
    updateCategoryGroup: (categoryGroupUpdatesData: CategoryGroup, fromSync?: boolean) => Promise<boolean>;
    deleteCategoryGroup: (categoryGroupId: string, fromSync?: boolean) => Promise<boolean>;
    setMonthlySnapshot: () => Promise<void>;
    getAvailableFundsCategory: () => {
        id: string;
        name: string;
        icon?: string | undefined;
        budgeted: number;
        activity: number;
        available: number;
        isIncomeCategory: boolean;
        isHidden: boolean;
        isActive: boolean;
        sortOrder: number;
        categoryGroupId?: string | undefined;
        parentCategoryId?: string | undefined;
        isSavingsGoal?: boolean | undefined;
        goalDate?: string | undefined;
        targetAmount?: number | undefined;
        priority?: number | undefined;
        proportion?: number | undefined;
        monthlyAmount?: number | undefined;
        note?: string | undefined;
        updatedAt?: string | undefined;
    } | undefined;
    toggleCategoryExpanded: (id: string) => void;
    expandAllCategories: () => void;
    collapseAllCategories: () => void;
    toggleCategoryGroupExpanded: (id: string) => void;
    expandAllCategoryGroups: () => void;
    collapseAllCategoryGroups: () => void;
    expandCategoryGroupsBatch: (groupIds: string[]) => void;
    toggleShowHiddenCategories: () => void;
    setShowHiddenCategories: (show: boolean) => void;
    loadCategories: () => Promise<void>;
    reset: () => Promise<void>;
    initializeStore: () => Promise<void>;
}, "getCategoryById" | "getCategoriesByParentId" | "rootCategories" | "savingsGoals" | "categoriesByGroup" | "activeCategories">, Pick<{
    categories: import("vue").Ref<{
        id: string;
        name: string;
        icon?: string | undefined;
        budgeted: number;
        activity: number;
        available: number;
        isIncomeCategory: boolean;
        isHidden: boolean;
        isActive: boolean;
        sortOrder: number;
        categoryGroupId?: string | undefined;
        parentCategoryId?: string | undefined;
        isSavingsGoal?: boolean | undefined;
        goalDate?: string | undefined;
        targetAmount?: number | undefined;
        priority?: number | undefined;
        proportion?: number | undefined;
        monthlyAmount?: number | undefined;
        note?: string | undefined;
        updatedAt?: string | undefined;
    }[], Category[] | {
        id: string;
        name: string;
        icon?: string | undefined;
        budgeted: number;
        activity: number;
        available: number;
        isIncomeCategory: boolean;
        isHidden: boolean;
        isActive: boolean;
        sortOrder: number;
        categoryGroupId?: string | undefined;
        parentCategoryId?: string | undefined;
        isSavingsGoal?: boolean | undefined;
        goalDate?: string | undefined;
        targetAmount?: number | undefined;
        priority?: number | undefined;
        proportion?: number | undefined;
        monthlyAmount?: number | undefined;
        note?: string | undefined;
        updatedAt?: string | undefined;
    }[]>;
    categoryGroups: import("vue").Ref<{
        id: string;
        name: string;
        sortOrder: number;
        isIncomeGroup: boolean;
        updatedAt?: string | undefined;
    }[], CategoryGroup[] | {
        id: string;
        name: string;
        sortOrder: number;
        isIncomeGroup: boolean;
        updatedAt?: string | undefined;
    }[]>;
    expandedCategories: import("vue").Ref<Set<string> & Omit<Set<string>, keyof Set<any>>, Set<string> | (Set<string> & Omit<Set<string>, keyof Set<any>>)>;
    expandedCategoryGroups: import("vue").Ref<Set<string> & Omit<Set<string>, keyof Set<any>>, Set<string> | (Set<string> & Omit<Set<string>, keyof Set<any>>)>;
    showHiddenCategories: import("vue").Ref<boolean, boolean>;
    isLoading: import("vue").Ref<boolean, boolean>;
    isLoaded: import("vue").Ref<boolean, boolean>;
    getCategoryById: import("vue").ComputedRef<(id: string) => {
        id: string;
        name: string;
        icon?: string | undefined;
        budgeted: number;
        activity: number;
        available: number;
        isIncomeCategory: boolean;
        isHidden: boolean;
        isActive: boolean;
        sortOrder: number;
        categoryGroupId?: string | undefined;
        parentCategoryId?: string | undefined;
        isSavingsGoal?: boolean | undefined;
        goalDate?: string | undefined;
        targetAmount?: number | undefined;
        priority?: number | undefined;
        proportion?: number | undefined;
        monthlyAmount?: number | undefined;
        note?: string | undefined;
        updatedAt?: string | undefined;
    } | undefined>;
    findCategoryById: (id: string) => {
        id: string;
        name: string;
        icon?: string | undefined;
        budgeted: number;
        activity: number;
        available: number;
        isIncomeCategory: boolean;
        isHidden: boolean;
        isActive: boolean;
        sortOrder: number;
        categoryGroupId?: string | undefined;
        parentCategoryId?: string | undefined;
        isSavingsGoal?: boolean | undefined;
        goalDate?: string | undefined;
        targetAmount?: number | undefined;
        priority?: number | undefined;
        proportion?: number | undefined;
        monthlyAmount?: number | undefined;
        note?: string | undefined;
        updatedAt?: string | undefined;
    } | undefined;
    getCategoriesByParentId: import("vue").ComputedRef<(parentId: string | null) => {
        id: string;
        name: string;
        icon?: string | undefined;
        budgeted: number;
        activity: number;
        available: number;
        isIncomeCategory: boolean;
        isHidden: boolean;
        isActive: boolean;
        sortOrder: number;
        categoryGroupId?: string | undefined;
        parentCategoryId?: string | undefined;
        isSavingsGoal?: boolean | undefined;
        goalDate?: string | undefined;
        targetAmount?: number | undefined;
        priority?: number | undefined;
        proportion?: number | undefined;
        monthlyAmount?: number | undefined;
        note?: string | undefined;
        updatedAt?: string | undefined;
    }[]>;
    getChildCategories: (parentId: string) => {
        id: string;
        name: string;
        icon?: string | undefined;
        budgeted: number;
        activity: number;
        available: number;
        isIncomeCategory: boolean;
        isHidden: boolean;
        isActive: boolean;
        sortOrder: number;
        categoryGroupId?: string | undefined;
        parentCategoryId?: string | undefined;
        isSavingsGoal?: boolean | undefined;
        goalDate?: string | undefined;
        targetAmount?: number | undefined;
        priority?: number | undefined;
        proportion?: number | undefined;
        monthlyAmount?: number | undefined;
        note?: string | undefined;
        updatedAt?: string | undefined;
    }[];
    rootCategories: import("vue").ComputedRef<{
        id: string;
        name: string;
        icon?: string | undefined;
        budgeted: number;
        activity: number;
        available: number;
        isIncomeCategory: boolean;
        isHidden: boolean;
        isActive: boolean;
        sortOrder: number;
        categoryGroupId?: string | undefined;
        parentCategoryId?: string | undefined;
        isSavingsGoal?: boolean | undefined;
        goalDate?: string | undefined;
        targetAmount?: number | undefined;
        priority?: number | undefined;
        proportion?: number | undefined;
        monthlyAmount?: number | undefined;
        note?: string | undefined;
        updatedAt?: string | undefined;
    }[]>;
    savingsGoals: import("vue").ComputedRef<{
        id: string;
        name: string;
        icon?: string | undefined;
        budgeted: number;
        activity: number;
        available: number;
        isIncomeCategory: boolean;
        isHidden: boolean;
        isActive: boolean;
        sortOrder: number;
        categoryGroupId?: string | undefined;
        parentCategoryId?: string | undefined;
        isSavingsGoal?: boolean | undefined;
        goalDate?: string | undefined;
        targetAmount?: number | undefined;
        priority?: number | undefined;
        proportion?: number | undefined;
        monthlyAmount?: number | undefined;
        note?: string | undefined;
        updatedAt?: string | undefined;
    }[]>;
    categoriesByGroup: import("vue").ComputedRef<Record<string, Category[]>>;
    activeCategories: import("vue").ComputedRef<{
        id: string;
        name: string;
        icon?: string | undefined;
        budgeted: number;
        activity: number;
        available: number;
        isIncomeCategory: boolean;
        isHidden: boolean;
        isActive: boolean;
        sortOrder: number;
        categoryGroupId?: string | undefined;
        parentCategoryId?: string | undefined;
        isSavingsGoal?: boolean | undefined;
        goalDate?: string | undefined;
        targetAmount?: number | undefined;
        priority?: number | undefined;
        proportion?: number | undefined;
        monthlyAmount?: number | undefined;
        note?: string | undefined;
        updatedAt?: string | undefined;
    }[]>;
    addCategory: (categoryData: Omit<Category, "id" | "updatedAt"> | Category, fromSync?: boolean) => Promise<Category>;
    addMultipleCategories: (categoriesToAdd: Category[], fromSync?: boolean) => Promise<Category[]>;
    updateCategory: (categoryUpdatesData: Category, fromSync?: boolean) => Promise<boolean>;
    deleteCategory: (categoryId: string, fromSync?: boolean) => Promise<void>;
    updateCategoryBalance: (id: string, amount: number) => Promise<boolean>;
    addCategoryGroup: (categoryGroupData: Omit<CategoryGroup, "id" | "updatedAt"> | CategoryGroup, fromSync?: boolean) => Promise<CategoryGroup>;
    addMultipleCategoryGroups: (categoryGroupsToAdd: CategoryGroup[], fromSync?: boolean) => Promise<CategoryGroup[]>;
    updateCategoryGroup: (categoryGroupUpdatesData: CategoryGroup, fromSync?: boolean) => Promise<boolean>;
    deleteCategoryGroup: (categoryGroupId: string, fromSync?: boolean) => Promise<boolean>;
    setMonthlySnapshot: () => Promise<void>;
    getAvailableFundsCategory: () => {
        id: string;
        name: string;
        icon?: string | undefined;
        budgeted: number;
        activity: number;
        available: number;
        isIncomeCategory: boolean;
        isHidden: boolean;
        isActive: boolean;
        sortOrder: number;
        categoryGroupId?: string | undefined;
        parentCategoryId?: string | undefined;
        isSavingsGoal?: boolean | undefined;
        goalDate?: string | undefined;
        targetAmount?: number | undefined;
        priority?: number | undefined;
        proportion?: number | undefined;
        monthlyAmount?: number | undefined;
        note?: string | undefined;
        updatedAt?: string | undefined;
    } | undefined;
    toggleCategoryExpanded: (id: string) => void;
    expandAllCategories: () => void;
    collapseAllCategories: () => void;
    toggleCategoryGroupExpanded: (id: string) => void;
    expandAllCategoryGroups: () => void;
    collapseAllCategoryGroups: () => void;
    expandCategoryGroupsBatch: (groupIds: string[]) => void;
    toggleShowHiddenCategories: () => void;
    setShowHiddenCategories: (show: boolean) => void;
    loadCategories: () => Promise<void>;
    reset: () => Promise<void>;
    initializeStore: () => Promise<void>;
}, "reset" | "initializeStore" | "findCategoryById" | "getChildCategories" | "addCategory" | "addMultipleCategories" | "updateCategory" | "deleteCategory" | "updateCategoryBalance" | "addCategoryGroup" | "addMultipleCategoryGroups" | "updateCategoryGroup" | "deleteCategoryGroup" | "setMonthlySnapshot" | "getAvailableFundsCategory" | "toggleCategoryExpanded" | "expandAllCategories" | "collapseAllCategories" | "toggleCategoryGroupExpanded" | "expandAllCategoryGroups" | "collapseAllCategoryGroups" | "expandCategoryGroupsBatch" | "toggleShowHiddenCategories" | "setShowHiddenCategories" | "loadCategories">>;
