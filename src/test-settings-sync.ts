// src/test-settings-sync.ts
/**
 * Test-Script f√ºr vereinfachte Settings-Synchronisation
 * Kann in der Browser-Konsole ausgef√ºhrt werden
 */

import { useSettingsStore } from '@/stores/settingsStore';
import { useSessionStore } from '@/stores/sessionStore';
import { SettingsApiService } from '@/services/SettingsApiService';
import { LogLevel } from '@/utils/logger';

// Globale Test-Funktionen f√ºr Browser-Konsole
declare global {
  interface Window {
    testSettingsSync: () => Promise<void>;
    testSettingsLoad: () => Promise<void>;
    testSettingsReset: () => Promise<void>;
    testBackendAvailability: () => Promise<void>;
    showCurrentSettings: () => void;
    testOfflineMode: () => Promise<void>;
  }
}

/**
 * Testet die vereinfachte Settings-Synchronisation
 */
window.testSettingsSync = async function() {
  console.log('üß™ Teste vereinfachte Settings-Synchronisation...');

  const settingsStore = useSettingsStore();
  const sessionStore = useSessionStore();

  if (!sessionStore.currentUser?.id) {
    console.error('‚ùå Kein angemeldeter Benutzer gefunden');
    return;
  }

  try {
    // 1. Pr√ºfe Backend-Verf√ºgbarkeit
    const isBackendAvailable = await settingsStore.isBackendAvailable();
    console.log(`üåê Backend verf√ºgbar: ${isBackendAvailable ? '‚úÖ' : '‚ùå'}`);

    // 2. √Ñndere Settings lokal
    console.log('üìù √Ñndere Settings lokal...');
    await settingsStore.setLoggerSettings(
      LogLevel.DEBUG,
      new Set(['store', 'ui', 'service', 'sync']),
      90
    );

    console.log('‚úÖ Settings lokal ge√§ndert und automatisch synchronisiert');
    console.log('üìä Aktuelle Settings:', {
      logLevel: settingsStore.logLevel,
      categories: [...settingsStore.enabledLogCategories],
      retentionDays: settingsStore.historyRetentionDays
    });

    // 3. Teste localStorage-Persistierung
    const localData = localStorage.getItem('finwise_settings');
    console.log('üíæ LocalStorage-Daten:', localData ? JSON.parse(localData) : 'Keine Daten');

  } catch (error) {
    console.error('‚ùå Fehler beim Testen der Settings-Sync:', error);
  }
};

/**
 * Testet das Laden von Settings (App-Start-Simulation)
 */
window.testSettingsLoad = async function() {
  console.log('üß™ Teste Settings-Load (App-Start-Simulation)...');

  const settingsStore = useSettingsStore();

  try {
    // Simuliere App-Start
    await settingsStore.loadFromStorage();
    console.log('‚úÖ Settings erfolgreich geladen (lokal + Backend falls verf√ºgbar)');
    console.log('üìä Geladene Settings:', {
      logLevel: settingsStore.logLevel,
      categories: [...settingsStore.enabledLogCategories],
      retentionDays: settingsStore.historyRetentionDays
    });
  } catch (error) {
    console.error('‚ùå Fehler beim Laden der Settings:', error);
  }
};

/**
 * Testet das Zur√ºcksetzen der Settings
 */
window.testSettingsReset = async function() {
  console.log('üß™ Teste Settings-Reset...');

  const settingsStore = useSettingsStore();

  try {
    const isBackendAvailable = await settingsStore.isBackendAvailable();
    console.log(`üåê Backend verf√ºgbar f√ºr Reset: ${isBackendAvailable ? '‚úÖ' : '‚ùå'}`);

    await settingsStore.resetToDefaults();
    console.log('‚úÖ Settings erfolgreich zur√ºckgesetzt (lokal + Backend falls verf√ºgbar)');
    console.log('üìä Reset Settings:', {
      logLevel: settingsStore.logLevel,
      categories: [...settingsStore.enabledLogCategories],
      retentionDays: settingsStore.historyRetentionDays
    });
  } catch (error) {
    console.error('‚ùå Fehler beim Zur√ºcksetzen der Settings:', error);
  }
};

/**
 * Testet die Backend-Verf√ºgbarkeit
 */
window.testBackendAvailability = async function() {
  console.log('üß™ Teste Backend-Verf√ºgbarkeit...');

  try {
    const isAvailable = await SettingsApiService.isBackendAvailable();
    console.log(isAvailable ? '‚úÖ Backend ist verf√ºgbar' : '‚ùå Backend ist nicht verf√ºgbar');

    if (isAvailable) {
      const sessionStore = useSessionStore();
      if (sessionStore.currentUser?.id) {
        console.log('üîç Teste direkten API-Call...');
        const settings = await SettingsApiService.getUserSettings(sessionStore.currentUser.id);
        console.log('‚úÖ Direkte API-Antwort:', settings);
      }
    }
  } catch (error) {
    console.error('‚ùå Fehler beim Testen der Backend-Verf√ºgbarkeit:', error);
  }
};

/**
 * Testet Offline-Modus (Backend nicht verf√ºgbar)
 */
window.testOfflineMode = async function() {
  console.log('üß™ Teste Offline-Modus...');

  const settingsStore = useSettingsStore();

  try {
    // Simuliere Offline-√Ñnderung
    console.log('üìù √Ñndere Settings im Offline-Modus...');

    // Tempor√§r Backend-Check √ºberschreiben
    const originalIsBackendAvailable = settingsStore.isBackendAvailable;
    settingsStore.isBackendAvailable = async () => false;

    await settingsStore.setLoggerSettings(
      LogLevel.WARN,
      new Set(['store', 'ui']),
      30
    );

    console.log('‚úÖ Settings erfolgreich offline ge√§ndert');
    console.log('üìä Offline Settings:', {
      logLevel: settingsStore.logLevel,
      categories: [...settingsStore.enabledLogCategories],
      retentionDays: settingsStore.historyRetentionDays
    });

    // Pr√ºfe localStorage
    const localData = localStorage.getItem('finwise_settings');
    console.log('üíæ LocalStorage (Offline):', localData ? JSON.parse(localData) : 'Keine Daten');

    // Stelle urspr√ºngliche Funktion wieder her
    settingsStore.isBackendAvailable = originalIsBackendAvailable;

  } catch (error) {
    console.error('‚ùå Fehler beim Testen des Offline-Modus:', error);
  }
};

/**
 * Zeigt aktuelle Settings an
 */
window.showCurrentSettings = function() {
  const settingsStore = useSettingsStore();
  const sessionStore = useSessionStore();

  console.log('üìä Aktuelle Settings:', {
    user: sessionStore.currentUser?.id || 'Nicht angemeldet',
    logLevel: settingsStore.logLevel,
    categories: [...settingsStore.enabledLogCategories],
    retentionDays: settingsStore.historyRetentionDays
  });

  // Zeige auch localStorage-Daten
  const localData = localStorage.getItem('finwise_settings');
  console.log('üíæ LocalStorage-Daten:', localData ? JSON.parse(localData) : 'Keine Daten');
};

// Automatische Registrierung beim Import
console.log('üîß Vereinfachte Settings-Sync Test-Funktionen verf√ºgbar:');
console.log('  - testSettingsSync() - Teste Settings-√Ñnderung mit Auto-Sync');
console.log('  - testSettingsLoad() - Teste App-Start (lokal + Backend)');
console.log('  - testSettingsReset() - Teste Reset (lokal + Backend)');
console.log('  - testBackendAvailability() - Teste Backend-Verf√ºgbarkeit');
console.log('  - testOfflineMode() - Teste Offline-Funktionalit√§t');
console.log('  - showCurrentSettings() - Zeige aktuelle Settings');

export {};
