import { BackendStatus, type ServerWebSocketMessage, type SyncState, type QueueStatistics } from '@/types';
export declare enum WebSocketConnectionStatus {
    CONNECTING = "connecting",
    CONNECTED = "connected",
    DISCONNECTED = "disconnected",
    ERROR = "error"
}
export declare const useWebSocketStore: import("pinia").StoreDefinition<"webSocket", Pick<{
    connectionStatus: import("vue").Ref<WebSocketConnectionStatus, WebSocketConnectionStatus>;
    backendStatus: import("vue").Ref<BackendStatus, BackendStatus>;
    lastError: import("vue").Ref<string | null, string | null>;
    lastMessage: import("vue").Ref<{
        type: "status";
        status: BackendStatus;
        message?: string | undefined;
    } | {
        type: "data_update";
        event_type: "data_update";
        tenant_id: string;
        entity_type: import("@/types").EntityTypeEnum;
        operation_type: import("@/types").SyncOperationType;
        data: {
            accounts?: {
                id: string;
                name: string;
                description?: string | undefined;
                note?: string | undefined;
                accountType: import("@/types").AccountType;
                isActive: boolean;
                isOfflineBudget: boolean;
                accountGroupId: string;
                sortOrder: number;
                iban?: string | undefined;
                balance: number;
                creditLimit?: number | undefined;
                offset: number;
                logo_path: string | null;
                updatedAt?: string | undefined;
            }[] | null | undefined;
            account_groups?: {
                id: string;
                name: string;
                sortOrder: number;
                logo_path: string | null;
                updatedAt?: string | undefined;
            }[] | null | undefined;
            categories?: {
                id: string;
                name: string;
                icon?: string | undefined;
                budgeted: number;
                activity: number;
                available: number;
                isIncomeCategory: boolean;
                isHidden: boolean;
                isActive: boolean;
                sortOrder: number;
                categoryGroupId?: string | undefined;
                parentCategoryId?: string | undefined;
                isSavingsGoal?: boolean | undefined;
                goalDate?: string | undefined;
                targetAmount?: number | undefined;
                priority?: number | undefined;
                proportion?: number | undefined;
                monthlyAmount?: number | undefined;
                note?: string | undefined;
                updatedAt?: string | undefined;
            }[] | null | undefined;
            category_groups?: {
                id: string;
                name: string;
                sortOrder: number;
                isIncomeGroup: boolean;
                updatedAt?: string | undefined;
            }[] | null | undefined;
            recipients?: {
                id: string;
                name: string;
                defaultCategoryId?: string | null | undefined;
                note?: string | undefined;
                updatedAt?: string | undefined;
            }[] | null | undefined;
            tags?: {
                id: string;
                name: string;
                parentTagId?: string | null | undefined;
                color?: string | undefined;
                icon?: string | undefined;
                updatedAt?: string | undefined;
            }[] | null | undefined;
            automation_rules?: {
                id: string;
                name: string;
                description?: string | undefined;
                stage: "PRE" | "DEFAULT" | "POST";
                conditions: {
                    type: import("@/types").RuleConditionType;
                    operator: string;
                    value: string | number | string[];
                }[];
                actions: {
                    type: import("@/types").RuleActionType;
                    field?: string | undefined;
                    value: string | string[] | number;
                }[];
                priority: number;
                isActive: boolean;
                conditionLogic?: "all" | "any" | undefined;
                updatedAt?: string | undefined;
            }[] | null | undefined;
            planning_transactions?: {
                id: string;
                name: string;
                accountId: string;
                categoryId: string | null;
                tagIds: string[];
                recipientId?: string | null | undefined;
                amount: number;
                amountType: import("@/types").AmountType;
                approximateAmount?: number | undefined;
                minAmount?: number | undefined;
                maxAmount?: number | undefined;
                note?: string | undefined;
                startDate: string;
                valueDate?: string | null | undefined;
                endDate?: string | null | undefined;
                recurrencePattern: import("@/types").RecurrencePattern;
                recurrenceCount?: number | null | undefined;
                recurrenceEndType: import("@/types").RecurrenceEndType;
                executionDay?: number | null | undefined;
                weekendHandling: import("@/types").WeekendHandlingType;
                transactionType?: import("@/types").TransactionType | undefined;
                counterPlanningTransactionId?: string | null | undefined;
                transferToAccountId?: string | null | undefined;
                transferToCategoryId?: string | null | undefined;
                isActive: boolean;
                forecastOnly: boolean;
                autoExecute?: boolean | undefined;
                updatedAt?: string | undefined;
            }[] | null | undefined;
            transactions?: {
                id: string;
                accountId: string;
                categoryId?: string | undefined;
                recipientId?: string | undefined;
                date: string;
                valueDate: string;
                amount: number;
                description: string;
                note?: string | undefined;
                tagIds: string[];
                type: import("@/types").TransactionType;
                runningBalance: number;
                counterTransactionId?: string | null | undefined;
                planningTransactionId?: string | null | undefined;
                isReconciliation?: boolean | undefined;
                isCategoryTransfer?: boolean | undefined;
                transferToAccountId?: string | null | undefined;
                reconciled?: boolean | undefined;
                toCategoryId?: string | undefined;
                payee?: string | undefined;
                createdAt?: string | undefined;
                updatedAt?: string | undefined;
            }[] | null | undefined;
            single_entity?: {
                id: string;
                name: string;
                defaultCategoryId?: string | null | undefined;
                note?: string | undefined;
                updatedAt?: string | undefined;
            } | {
                id: string;
                name: string;
                description?: string | undefined;
                note?: string | undefined;
                accountType: import("@/types").AccountType;
                isActive: boolean;
                isOfflineBudget: boolean;
                accountGroupId: string;
                sortOrder: number;
                iban?: string | undefined;
                balance: number;
                creditLimit?: number | undefined;
                offset: number;
                logo_path: string | null;
                updatedAt?: string | undefined;
            } | {
                id: string;
                name: string;
                sortOrder: number;
                logo_path: string | null;
                updatedAt?: string | undefined;
            } | {
                id: string;
                name: string;
                icon?: string | undefined;
                budgeted: number;
                activity: number;
                available: number;
                isIncomeCategory: boolean;
                isHidden: boolean;
                isActive: boolean;
                sortOrder: number;
                categoryGroupId?: string | undefined;
                parentCategoryId?: string | undefined;
                isSavingsGoal?: boolean | undefined;
                goalDate?: string | undefined;
                targetAmount?: number | undefined;
                priority?: number | undefined;
                proportion?: number | undefined;
                monthlyAmount?: number | undefined;
                note?: string | undefined;
                updatedAt?: string | undefined;
            } | {
                id: string;
                name: string;
                sortOrder: number;
                isIncomeGroup: boolean;
                updatedAt?: string | undefined;
            } | {
                id: string;
                accountId: string;
                categoryId?: string | undefined;
                recipientId?: string | undefined;
                date: string;
                valueDate: string;
                amount: number;
                description: string;
                note?: string | undefined;
                tagIds: string[];
                type: import("@/types").TransactionType;
                runningBalance: number;
                counterTransactionId?: string | null | undefined;
                planningTransactionId?: string | null | undefined;
                isReconciliation?: boolean | undefined;
                isCategoryTransfer?: boolean | undefined;
                transferToAccountId?: string | null | undefined;
                reconciled?: boolean | undefined;
                toCategoryId?: string | undefined;
                payee?: string | undefined;
                createdAt?: string | undefined;
                updatedAt?: string | undefined;
            } | {
                id: string;
                name: string;
                parentTagId?: string | null | undefined;
                color?: string | undefined;
                icon?: string | undefined;
                updatedAt?: string | undefined;
            } | {
                id: string;
                name: string;
                accountId: string;
                categoryId: string | null;
                tagIds: string[];
                recipientId?: string | null | undefined;
                amount: number;
                amountType: import("@/types").AmountType;
                approximateAmount?: number | undefined;
                minAmount?: number | undefined;
                maxAmount?: number | undefined;
                note?: string | undefined;
                startDate: string;
                valueDate?: string | null | undefined;
                endDate?: string | null | undefined;
                recurrencePattern: import("@/types").RecurrencePattern;
                recurrenceCount?: number | null | undefined;
                recurrenceEndType: import("@/types").RecurrenceEndType;
                executionDay?: number | null | undefined;
                weekendHandling: import("@/types").WeekendHandlingType;
                transactionType?: import("@/types").TransactionType | undefined;
                counterPlanningTransactionId?: string | null | undefined;
                transferToAccountId?: string | null | undefined;
                transferToCategoryId?: string | null | undefined;
                isActive: boolean;
                forecastOnly: boolean;
                autoExecute?: boolean | undefined;
                updatedAt?: string | undefined;
            } | {
                id: string;
                name: string;
                description?: string | undefined;
                stage: "PRE" | "DEFAULT" | "POST";
                conditions: {
                    type: import("@/types").RuleConditionType;
                    operator: string;
                    value: string | number | string[];
                }[];
                actions: {
                    type: import("@/types").RuleActionType;
                    field?: string | undefined;
                    value: string | string[] | number;
                }[];
                priority: number;
                isActive: boolean;
                conditionLogic?: "all" | "any" | undefined;
                updatedAt?: string | undefined;
            } | {
                id: string;
            } | undefined;
        };
    } | {
        type: "initial_data_load";
        event_type: "initial_data_load";
        tenant_id: string;
        payload: {
            accounts: {
                id: string;
                name: string;
                description?: string | undefined;
                note?: string | undefined;
                accountType: import("@/types").AccountType;
                isActive: boolean;
                isOfflineBudget: boolean;
                accountGroupId: string;
                sortOrder: number;
                iban?: string | undefined;
                balance: number;
                creditLimit?: number | undefined;
                offset: number;
                logo_path: string | null;
                updatedAt?: string | undefined;
            }[];
            account_groups: {
                id: string;
                name: string;
                sortOrder: number;
                logo_path: string | null;
                updatedAt?: string | undefined;
            }[];
            categories: {
                id: string;
                name: string;
                icon?: string | undefined;
                budgeted: number;
                activity: number;
                available: number;
                isIncomeCategory: boolean;
                isHidden: boolean;
                isActive: boolean;
                sortOrder: number;
                categoryGroupId?: string | undefined;
                parentCategoryId?: string | undefined;
                isSavingsGoal?: boolean | undefined;
                goalDate?: string | undefined;
                targetAmount?: number | undefined;
                priority?: number | undefined;
                proportion?: number | undefined;
                monthlyAmount?: number | undefined;
                note?: string | undefined;
                updatedAt?: string | undefined;
            }[];
            category_groups: {
                id: string;
                name: string;
                sortOrder: number;
                isIncomeGroup: boolean;
                updatedAt?: string | undefined;
            }[];
            recipients?: {
                id: string;
                name: string;
                defaultCategoryId?: string | null | undefined;
                note?: string | undefined;
                updatedAt?: string | undefined;
            }[] | undefined;
            tags?: {
                id: string;
                name: string;
                parentTagId?: string | null | undefined;
                color?: string | undefined;
                icon?: string | undefined;
                updatedAt?: string | undefined;
            }[] | undefined;
            automation_rules?: {
                id: string;
                name: string;
                description?: string | undefined;
                stage: "PRE" | "DEFAULT" | "POST";
                conditions: {
                    type: import("@/types").RuleConditionType;
                    operator: string;
                    value: string | number | string[];
                }[];
                actions: {
                    type: import("@/types").RuleActionType;
                    field?: string | undefined;
                    value: string | string[] | number;
                }[];
                priority: number;
                isActive: boolean;
                conditionLogic?: "all" | "any" | undefined;
                updatedAt?: string | undefined;
            }[] | undefined;
            planning_transactions?: {
                id: string;
                name: string;
                accountId: string;
                categoryId: string | null;
                tagIds: string[];
                recipientId?: string | null | undefined;
                amount: number;
                amountType: import("@/types").AmountType;
                approximateAmount?: number | undefined;
                minAmount?: number | undefined;
                maxAmount?: number | undefined;
                note?: string | undefined;
                startDate: string;
                valueDate?: string | null | undefined;
                endDate?: string | null | undefined;
                recurrencePattern: import("@/types").RecurrencePattern;
                recurrenceCount?: number | null | undefined;
                recurrenceEndType: import("@/types").RecurrenceEndType;
                executionDay?: number | null | undefined;
                weekendHandling: import("@/types").WeekendHandlingType;
                transactionType?: import("@/types").TransactionType | undefined;
                counterPlanningTransactionId?: string | null | undefined;
                transferToAccountId?: string | null | undefined;
                transferToCategoryId?: string | null | undefined;
                isActive: boolean;
                forecastOnly: boolean;
                autoExecute?: boolean | undefined;
                updatedAt?: string | undefined;
            }[] | undefined;
            transactions?: {
                id: string;
                accountId: string;
                categoryId?: string | undefined;
                recipientId?: string | undefined;
                date: string;
                valueDate: string;
                amount: number;
                description: string;
                note?: string | undefined;
                tagIds: string[];
                type: import("@/types").TransactionType;
                runningBalance: number;
                counterTransactionId?: string | null | undefined;
                planningTransactionId?: string | null | undefined;
                isReconciliation?: boolean | undefined;
                isCategoryTransfer?: boolean | undefined;
                transferToAccountId?: string | null | undefined;
                reconciled?: boolean | undefined;
                toCategoryId?: string | undefined;
                payee?: string | undefined;
                createdAt?: string | undefined;
                updatedAt?: string | undefined;
            }[] | undefined;
        };
    } | {
        type: "sync_ack";
        id: string;
        status: "processed";
        entityId: string;
        entityType: import("@/types").EntityTypeEnum;
        operationType: import("@/types").SyncOperationType;
    } | {
        type: "sync_nack";
        id: string;
        status: "failed";
        entityId: string;
        entityType: import("@/types").EntityTypeEnum;
        operationType: import("@/types").SyncOperationType;
        reason: string;
        detail?: string | undefined;
    } | {
        type: "data_status_response";
        tenant_id: string;
        entity_checksums: Record<string, Record<string, any>>;
        last_sync_time: number;
    } | {
        type: "pong";
        timestamp?: number | undefined;
    } | {
        type: "connection_status_response";
        tenant_id: string;
        backend_status: string;
        connection_healthy: boolean;
        stats: Record<string, any>;
    } | {
        type: "system_notification";
        notification_type: string;
        message: string;
        timestamp: number;
    } | {
        type: "maintenance_notification";
        maintenance_enabled: boolean;
        message: string;
        timestamp: number;
    } | {
        type: "tenant_disconnect_ack";
        tenant_id: string;
        status: "success" | "error";
        message?: string | undefined;
    } | null, ServerWebSocketMessage | {
        type: "status";
        status: BackendStatus;
        message?: string | undefined;
    } | {
        type: "data_update";
        event_type: "data_update";
        tenant_id: string;
        entity_type: import("@/types").EntityTypeEnum;
        operation_type: import("@/types").SyncOperationType;
        data: {
            accounts?: {
                id: string;
                name: string;
                description?: string | undefined;
                note?: string | undefined;
                accountType: import("@/types").AccountType;
                isActive: boolean;
                isOfflineBudget: boolean;
                accountGroupId: string;
                sortOrder: number;
                iban?: string | undefined;
                balance: number;
                creditLimit?: number | undefined;
                offset: number;
                logo_path: string | null;
                updatedAt?: string | undefined;
            }[] | null | undefined;
            account_groups?: {
                id: string;
                name: string;
                sortOrder: number;
                logo_path: string | null;
                updatedAt?: string | undefined;
            }[] | null | undefined;
            categories?: {
                id: string;
                name: string;
                icon?: string | undefined;
                budgeted: number;
                activity: number;
                available: number;
                isIncomeCategory: boolean;
                isHidden: boolean;
                isActive: boolean;
                sortOrder: number;
                categoryGroupId?: string | undefined;
                parentCategoryId?: string | undefined;
                isSavingsGoal?: boolean | undefined;
                goalDate?: string | undefined;
                targetAmount?: number | undefined;
                priority?: number | undefined;
                proportion?: number | undefined;
                monthlyAmount?: number | undefined;
                note?: string | undefined;
                updatedAt?: string | undefined;
            }[] | null | undefined;
            category_groups?: {
                id: string;
                name: string;
                sortOrder: number;
                isIncomeGroup: boolean;
                updatedAt?: string | undefined;
            }[] | null | undefined;
            recipients?: {
                id: string;
                name: string;
                defaultCategoryId?: string | null | undefined;
                note?: string | undefined;
                updatedAt?: string | undefined;
            }[] | null | undefined;
            tags?: {
                id: string;
                name: string;
                parentTagId?: string | null | undefined;
                color?: string | undefined;
                icon?: string | undefined;
                updatedAt?: string | undefined;
            }[] | null | undefined;
            automation_rules?: {
                id: string;
                name: string;
                description?: string | undefined;
                stage: "PRE" | "DEFAULT" | "POST";
                conditions: {
                    type: import("@/types").RuleConditionType;
                    operator: string;
                    value: string | number | string[];
                }[];
                actions: {
                    type: import("@/types").RuleActionType;
                    field?: string | undefined;
                    value: string | string[] | number;
                }[];
                priority: number;
                isActive: boolean;
                conditionLogic?: "all" | "any" | undefined;
                updatedAt?: string | undefined;
            }[] | null | undefined;
            planning_transactions?: {
                id: string;
                name: string;
                accountId: string;
                categoryId: string | null;
                tagIds: string[];
                recipientId?: string | null | undefined;
                amount: number;
                amountType: import("@/types").AmountType;
                approximateAmount?: number | undefined;
                minAmount?: number | undefined;
                maxAmount?: number | undefined;
                note?: string | undefined;
                startDate: string;
                valueDate?: string | null | undefined;
                endDate?: string | null | undefined;
                recurrencePattern: import("@/types").RecurrencePattern;
                recurrenceCount?: number | null | undefined;
                recurrenceEndType: import("@/types").RecurrenceEndType;
                executionDay?: number | null | undefined;
                weekendHandling: import("@/types").WeekendHandlingType;
                transactionType?: import("@/types").TransactionType | undefined;
                counterPlanningTransactionId?: string | null | undefined;
                transferToAccountId?: string | null | undefined;
                transferToCategoryId?: string | null | undefined;
                isActive: boolean;
                forecastOnly: boolean;
                autoExecute?: boolean | undefined;
                updatedAt?: string | undefined;
            }[] | null | undefined;
            transactions?: {
                id: string;
                accountId: string;
                categoryId?: string | undefined;
                recipientId?: string | undefined;
                date: string;
                valueDate: string;
                amount: number;
                description: string;
                note?: string | undefined;
                tagIds: string[];
                type: import("@/types").TransactionType;
                runningBalance: number;
                counterTransactionId?: string | null | undefined;
                planningTransactionId?: string | null | undefined;
                isReconciliation?: boolean | undefined;
                isCategoryTransfer?: boolean | undefined;
                transferToAccountId?: string | null | undefined;
                reconciled?: boolean | undefined;
                toCategoryId?: string | undefined;
                payee?: string | undefined;
                createdAt?: string | undefined;
                updatedAt?: string | undefined;
            }[] | null | undefined;
            single_entity?: {
                id: string;
                name: string;
                defaultCategoryId?: string | null | undefined;
                note?: string | undefined;
                updatedAt?: string | undefined;
            } | {
                id: string;
                name: string;
                description?: string | undefined;
                note?: string | undefined;
                accountType: import("@/types").AccountType;
                isActive: boolean;
                isOfflineBudget: boolean;
                accountGroupId: string;
                sortOrder: number;
                iban?: string | undefined;
                balance: number;
                creditLimit?: number | undefined;
                offset: number;
                logo_path: string | null;
                updatedAt?: string | undefined;
            } | {
                id: string;
                name: string;
                sortOrder: number;
                logo_path: string | null;
                updatedAt?: string | undefined;
            } | {
                id: string;
                name: string;
                icon?: string | undefined;
                budgeted: number;
                activity: number;
                available: number;
                isIncomeCategory: boolean;
                isHidden: boolean;
                isActive: boolean;
                sortOrder: number;
                categoryGroupId?: string | undefined;
                parentCategoryId?: string | undefined;
                isSavingsGoal?: boolean | undefined;
                goalDate?: string | undefined;
                targetAmount?: number | undefined;
                priority?: number | undefined;
                proportion?: number | undefined;
                monthlyAmount?: number | undefined;
                note?: string | undefined;
                updatedAt?: string | undefined;
            } | {
                id: string;
                name: string;
                sortOrder: number;
                isIncomeGroup: boolean;
                updatedAt?: string | undefined;
            } | {
                id: string;
                accountId: string;
                categoryId?: string | undefined;
                recipientId?: string | undefined;
                date: string;
                valueDate: string;
                amount: number;
                description: string;
                note?: string | undefined;
                tagIds: string[];
                type: import("@/types").TransactionType;
                runningBalance: number;
                counterTransactionId?: string | null | undefined;
                planningTransactionId?: string | null | undefined;
                isReconciliation?: boolean | undefined;
                isCategoryTransfer?: boolean | undefined;
                transferToAccountId?: string | null | undefined;
                reconciled?: boolean | undefined;
                toCategoryId?: string | undefined;
                payee?: string | undefined;
                createdAt?: string | undefined;
                updatedAt?: string | undefined;
            } | {
                id: string;
                name: string;
                parentTagId?: string | null | undefined;
                color?: string | undefined;
                icon?: string | undefined;
                updatedAt?: string | undefined;
            } | {
                id: string;
                name: string;
                accountId: string;
                categoryId: string | null;
                tagIds: string[];
                recipientId?: string | null | undefined;
                amount: number;
                amountType: import("@/types").AmountType;
                approximateAmount?: number | undefined;
                minAmount?: number | undefined;
                maxAmount?: number | undefined;
                note?: string | undefined;
                startDate: string;
                valueDate?: string | null | undefined;
                endDate?: string | null | undefined;
                recurrencePattern: import("@/types").RecurrencePattern;
                recurrenceCount?: number | null | undefined;
                recurrenceEndType: import("@/types").RecurrenceEndType;
                executionDay?: number | null | undefined;
                weekendHandling: import("@/types").WeekendHandlingType;
                transactionType?: import("@/types").TransactionType | undefined;
                counterPlanningTransactionId?: string | null | undefined;
                transferToAccountId?: string | null | undefined;
                transferToCategoryId?: string | null | undefined;
                isActive: boolean;
                forecastOnly: boolean;
                autoExecute?: boolean | undefined;
                updatedAt?: string | undefined;
            } | {
                id: string;
                name: string;
                description?: string | undefined;
                stage: "PRE" | "DEFAULT" | "POST";
                conditions: {
                    type: import("@/types").RuleConditionType;
                    operator: string;
                    value: string | number | string[];
                }[];
                actions: {
                    type: import("@/types").RuleActionType;
                    field?: string | undefined;
                    value: string | string[] | number;
                }[];
                priority: number;
                isActive: boolean;
                conditionLogic?: "all" | "any" | undefined;
                updatedAt?: string | undefined;
            } | {
                id: string;
            } | undefined;
        };
    } | {
        type: "initial_data_load";
        event_type: "initial_data_load";
        tenant_id: string;
        payload: {
            accounts: {
                id: string;
                name: string;
                description?: string | undefined;
                note?: string | undefined;
                accountType: import("@/types").AccountType;
                isActive: boolean;
                isOfflineBudget: boolean;
                accountGroupId: string;
                sortOrder: number;
                iban?: string | undefined;
                balance: number;
                creditLimit?: number | undefined;
                offset: number;
                logo_path: string | null;
                updatedAt?: string | undefined;
            }[];
            account_groups: {
                id: string;
                name: string;
                sortOrder: number;
                logo_path: string | null;
                updatedAt?: string | undefined;
            }[];
            categories: {
                id: string;
                name: string;
                icon?: string | undefined;
                budgeted: number;
                activity: number;
                available: number;
                isIncomeCategory: boolean;
                isHidden: boolean;
                isActive: boolean;
                sortOrder: number;
                categoryGroupId?: string | undefined;
                parentCategoryId?: string | undefined;
                isSavingsGoal?: boolean | undefined;
                goalDate?: string | undefined;
                targetAmount?: number | undefined;
                priority?: number | undefined;
                proportion?: number | undefined;
                monthlyAmount?: number | undefined;
                note?: string | undefined;
                updatedAt?: string | undefined;
            }[];
            category_groups: {
                id: string;
                name: string;
                sortOrder: number;
                isIncomeGroup: boolean;
                updatedAt?: string | undefined;
            }[];
            recipients?: {
                id: string;
                name: string;
                defaultCategoryId?: string | null | undefined;
                note?: string | undefined;
                updatedAt?: string | undefined;
            }[] | undefined;
            tags?: {
                id: string;
                name: string;
                parentTagId?: string | null | undefined;
                color?: string | undefined;
                icon?: string | undefined;
                updatedAt?: string | undefined;
            }[] | undefined;
            automation_rules?: {
                id: string;
                name: string;
                description?: string | undefined;
                stage: "PRE" | "DEFAULT" | "POST";
                conditions: {
                    type: import("@/types").RuleConditionType;
                    operator: string;
                    value: string | number | string[];
                }[];
                actions: {
                    type: import("@/types").RuleActionType;
                    field?: string | undefined;
                    value: string | string[] | number;
                }[];
                priority: number;
                isActive: boolean;
                conditionLogic?: "all" | "any" | undefined;
                updatedAt?: string | undefined;
            }[] | undefined;
            planning_transactions?: {
                id: string;
                name: string;
                accountId: string;
                categoryId: string | null;
                tagIds: string[];
                recipientId?: string | null | undefined;
                amount: number;
                amountType: import("@/types").AmountType;
                approximateAmount?: number | undefined;
                minAmount?: number | undefined;
                maxAmount?: number | undefined;
                note?: string | undefined;
                startDate: string;
                valueDate?: string | null | undefined;
                endDate?: string | null | undefined;
                recurrencePattern: import("@/types").RecurrencePattern;
                recurrenceCount?: number | null | undefined;
                recurrenceEndType: import("@/types").RecurrenceEndType;
                executionDay?: number | null | undefined;
                weekendHandling: import("@/types").WeekendHandlingType;
                transactionType?: import("@/types").TransactionType | undefined;
                counterPlanningTransactionId?: string | null | undefined;
                transferToAccountId?: string | null | undefined;
                transferToCategoryId?: string | null | undefined;
                isActive: boolean;
                forecastOnly: boolean;
                autoExecute?: boolean | undefined;
                updatedAt?: string | undefined;
            }[] | undefined;
            transactions?: {
                id: string;
                accountId: string;
                categoryId?: string | undefined;
                recipientId?: string | undefined;
                date: string;
                valueDate: string;
                amount: number;
                description: string;
                note?: string | undefined;
                tagIds: string[];
                type: import("@/types").TransactionType;
                runningBalance: number;
                counterTransactionId?: string | null | undefined;
                planningTransactionId?: string | null | undefined;
                isReconciliation?: boolean | undefined;
                isCategoryTransfer?: boolean | undefined;
                transferToAccountId?: string | null | undefined;
                reconciled?: boolean | undefined;
                toCategoryId?: string | undefined;
                payee?: string | undefined;
                createdAt?: string | undefined;
                updatedAt?: string | undefined;
            }[] | undefined;
        };
    } | {
        type: "sync_ack";
        id: string;
        status: "processed";
        entityId: string;
        entityType: import("@/types").EntityTypeEnum;
        operationType: import("@/types").SyncOperationType;
    } | {
        type: "sync_nack";
        id: string;
        status: "failed";
        entityId: string;
        entityType: import("@/types").EntityTypeEnum;
        operationType: import("@/types").SyncOperationType;
        reason: string;
        detail?: string | undefined;
    } | {
        type: "data_status_response";
        tenant_id: string;
        entity_checksums: Record<string, Record<string, any>>;
        last_sync_time: number;
    } | {
        type: "pong";
        timestamp?: number | undefined;
    } | {
        type: "connection_status_response";
        tenant_id: string;
        backend_status: string;
        connection_healthy: boolean;
        stats: Record<string, any>;
    } | {
        type: "system_notification";
        notification_type: string;
        message: string;
        timestamp: number;
    } | {
        type: "maintenance_notification";
        maintenance_enabled: boolean;
        message: string;
        timestamp: number;
    } | {
        type: "tenant_disconnect_ack";
        tenant_id: string;
        status: "success" | "error";
        message?: string | undefined;
    } | null>;
    syncState: import("vue").Ref<{
        isAutoSyncEnabled: boolean;
        lastAutoSyncTime: number | null;
        nextAutoSyncTime: number | null;
        queueStatistics: {
            pendingCount: number;
            processingCount: number;
            failedCount: number;
            lastSyncTime: number | null;
            oldestPendingTime: number | null;
            totalSyncedToday: number;
            averageSyncDuration: number;
            lastErrorMessage: string | null;
        } | null;
        syncInProgress: boolean;
        syncAnimationEndTime: number | null;
        periodicSyncInterval: number;
    }, SyncState | {
        isAutoSyncEnabled: boolean;
        lastAutoSyncTime: number | null;
        nextAutoSyncTime: number | null;
        queueStatistics: {
            pendingCount: number;
            processingCount: number;
            failedCount: number;
            lastSyncTime: number | null;
            oldestPendingTime: number | null;
            totalSyncedToday: number;
            averageSyncDuration: number;
            lastErrorMessage: string | null;
        } | null;
        syncInProgress: boolean;
        syncAnimationEndTime: number | null;
        periodicSyncInterval: number;
    }>;
    setConnectionStatus: (newStatus: WebSocketConnectionStatus) => void;
    setBackendStatus: (newStatus: BackendStatus) => void;
    setError: (errorMessage: string | null) => void;
    setLastMessage: (message: ServerWebSocketMessage) => void;
    reset: () => void;
    setSyncInProgress: (inProgress: boolean, minimumDuration?: number) => void;
    updateQueueStatistics: (stats: QueueStatistics) => void;
    setAutoSyncEnabled: (enabled: boolean) => void;
    setPeriodicSyncInterval: (intervalMs: number) => void;
    updateLastAutoSyncTime: (timestamp?: number | null) => void;
    recordSyncMetrics: (duration: number, success: boolean, error?: string) => void;
}, "connectionStatus" | "backendStatus" | "lastError" | "lastMessage" | "syncState">, Pick<{
    connectionStatus: import("vue").Ref<WebSocketConnectionStatus, WebSocketConnectionStatus>;
    backendStatus: import("vue").Ref<BackendStatus, BackendStatus>;
    lastError: import("vue").Ref<string | null, string | null>;
    lastMessage: import("vue").Ref<{
        type: "status";
        status: BackendStatus;
        message?: string | undefined;
    } | {
        type: "data_update";
        event_type: "data_update";
        tenant_id: string;
        entity_type: import("@/types").EntityTypeEnum;
        operation_type: import("@/types").SyncOperationType;
        data: {
            accounts?: {
                id: string;
                name: string;
                description?: string | undefined;
                note?: string | undefined;
                accountType: import("@/types").AccountType;
                isActive: boolean;
                isOfflineBudget: boolean;
                accountGroupId: string;
                sortOrder: number;
                iban?: string | undefined;
                balance: number;
                creditLimit?: number | undefined;
                offset: number;
                logo_path: string | null;
                updatedAt?: string | undefined;
            }[] | null | undefined;
            account_groups?: {
                id: string;
                name: string;
                sortOrder: number;
                logo_path: string | null;
                updatedAt?: string | undefined;
            }[] | null | undefined;
            categories?: {
                id: string;
                name: string;
                icon?: string | undefined;
                budgeted: number;
                activity: number;
                available: number;
                isIncomeCategory: boolean;
                isHidden: boolean;
                isActive: boolean;
                sortOrder: number;
                categoryGroupId?: string | undefined;
                parentCategoryId?: string | undefined;
                isSavingsGoal?: boolean | undefined;
                goalDate?: string | undefined;
                targetAmount?: number | undefined;
                priority?: number | undefined;
                proportion?: number | undefined;
                monthlyAmount?: number | undefined;
                note?: string | undefined;
                updatedAt?: string | undefined;
            }[] | null | undefined;
            category_groups?: {
                id: string;
                name: string;
                sortOrder: number;
                isIncomeGroup: boolean;
                updatedAt?: string | undefined;
            }[] | null | undefined;
            recipients?: {
                id: string;
                name: string;
                defaultCategoryId?: string | null | undefined;
                note?: string | undefined;
                updatedAt?: string | undefined;
            }[] | null | undefined;
            tags?: {
                id: string;
                name: string;
                parentTagId?: string | null | undefined;
                color?: string | undefined;
                icon?: string | undefined;
                updatedAt?: string | undefined;
            }[] | null | undefined;
            automation_rules?: {
                id: string;
                name: string;
                description?: string | undefined;
                stage: "PRE" | "DEFAULT" | "POST";
                conditions: {
                    type: import("@/types").RuleConditionType;
                    operator: string;
                    value: string | number | string[];
                }[];
                actions: {
                    type: import("@/types").RuleActionType;
                    field?: string | undefined;
                    value: string | string[] | number;
                }[];
                priority: number;
                isActive: boolean;
                conditionLogic?: "all" | "any" | undefined;
                updatedAt?: string | undefined;
            }[] | null | undefined;
            planning_transactions?: {
                id: string;
                name: string;
                accountId: string;
                categoryId: string | null;
                tagIds: string[];
                recipientId?: string | null | undefined;
                amount: number;
                amountType: import("@/types").AmountType;
                approximateAmount?: number | undefined;
                minAmount?: number | undefined;
                maxAmount?: number | undefined;
                note?: string | undefined;
                startDate: string;
                valueDate?: string | null | undefined;
                endDate?: string | null | undefined;
                recurrencePattern: import("@/types").RecurrencePattern;
                recurrenceCount?: number | null | undefined;
                recurrenceEndType: import("@/types").RecurrenceEndType;
                executionDay?: number | null | undefined;
                weekendHandling: import("@/types").WeekendHandlingType;
                transactionType?: import("@/types").TransactionType | undefined;
                counterPlanningTransactionId?: string | null | undefined;
                transferToAccountId?: string | null | undefined;
                transferToCategoryId?: string | null | undefined;
                isActive: boolean;
                forecastOnly: boolean;
                autoExecute?: boolean | undefined;
                updatedAt?: string | undefined;
            }[] | null | undefined;
            transactions?: {
                id: string;
                accountId: string;
                categoryId?: string | undefined;
                recipientId?: string | undefined;
                date: string;
                valueDate: string;
                amount: number;
                description: string;
                note?: string | undefined;
                tagIds: string[];
                type: import("@/types").TransactionType;
                runningBalance: number;
                counterTransactionId?: string | null | undefined;
                planningTransactionId?: string | null | undefined;
                isReconciliation?: boolean | undefined;
                isCategoryTransfer?: boolean | undefined;
                transferToAccountId?: string | null | undefined;
                reconciled?: boolean | undefined;
                toCategoryId?: string | undefined;
                payee?: string | undefined;
                createdAt?: string | undefined;
                updatedAt?: string | undefined;
            }[] | null | undefined;
            single_entity?: {
                id: string;
                name: string;
                defaultCategoryId?: string | null | undefined;
                note?: string | undefined;
                updatedAt?: string | undefined;
            } | {
                id: string;
                name: string;
                description?: string | undefined;
                note?: string | undefined;
                accountType: import("@/types").AccountType;
                isActive: boolean;
                isOfflineBudget: boolean;
                accountGroupId: string;
                sortOrder: number;
                iban?: string | undefined;
                balance: number;
                creditLimit?: number | undefined;
                offset: number;
                logo_path: string | null;
                updatedAt?: string | undefined;
            } | {
                id: string;
                name: string;
                sortOrder: number;
                logo_path: string | null;
                updatedAt?: string | undefined;
            } | {
                id: string;
                name: string;
                icon?: string | undefined;
                budgeted: number;
                activity: number;
                available: number;
                isIncomeCategory: boolean;
                isHidden: boolean;
                isActive: boolean;
                sortOrder: number;
                categoryGroupId?: string | undefined;
                parentCategoryId?: string | undefined;
                isSavingsGoal?: boolean | undefined;
                goalDate?: string | undefined;
                targetAmount?: number | undefined;
                priority?: number | undefined;
                proportion?: number | undefined;
                monthlyAmount?: number | undefined;
                note?: string | undefined;
                updatedAt?: string | undefined;
            } | {
                id: string;
                name: string;
                sortOrder: number;
                isIncomeGroup: boolean;
                updatedAt?: string | undefined;
            } | {
                id: string;
                accountId: string;
                categoryId?: string | undefined;
                recipientId?: string | undefined;
                date: string;
                valueDate: string;
                amount: number;
                description: string;
                note?: string | undefined;
                tagIds: string[];
                type: import("@/types").TransactionType;
                runningBalance: number;
                counterTransactionId?: string | null | undefined;
                planningTransactionId?: string | null | undefined;
                isReconciliation?: boolean | undefined;
                isCategoryTransfer?: boolean | undefined;
                transferToAccountId?: string | null | undefined;
                reconciled?: boolean | undefined;
                toCategoryId?: string | undefined;
                payee?: string | undefined;
                createdAt?: string | undefined;
                updatedAt?: string | undefined;
            } | {
                id: string;
                name: string;
                parentTagId?: string | null | undefined;
                color?: string | undefined;
                icon?: string | undefined;
                updatedAt?: string | undefined;
            } | {
                id: string;
                name: string;
                accountId: string;
                categoryId: string | null;
                tagIds: string[];
                recipientId?: string | null | undefined;
                amount: number;
                amountType: import("@/types").AmountType;
                approximateAmount?: number | undefined;
                minAmount?: number | undefined;
                maxAmount?: number | undefined;
                note?: string | undefined;
                startDate: string;
                valueDate?: string | null | undefined;
                endDate?: string | null | undefined;
                recurrencePattern: import("@/types").RecurrencePattern;
                recurrenceCount?: number | null | undefined;
                recurrenceEndType: import("@/types").RecurrenceEndType;
                executionDay?: number | null | undefined;
                weekendHandling: import("@/types").WeekendHandlingType;
                transactionType?: import("@/types").TransactionType | undefined;
                counterPlanningTransactionId?: string | null | undefined;
                transferToAccountId?: string | null | undefined;
                transferToCategoryId?: string | null | undefined;
                isActive: boolean;
                forecastOnly: boolean;
                autoExecute?: boolean | undefined;
                updatedAt?: string | undefined;
            } | {
                id: string;
                name: string;
                description?: string | undefined;
                stage: "PRE" | "DEFAULT" | "POST";
                conditions: {
                    type: import("@/types").RuleConditionType;
                    operator: string;
                    value: string | number | string[];
                }[];
                actions: {
                    type: import("@/types").RuleActionType;
                    field?: string | undefined;
                    value: string | string[] | number;
                }[];
                priority: number;
                isActive: boolean;
                conditionLogic?: "all" | "any" | undefined;
                updatedAt?: string | undefined;
            } | {
                id: string;
            } | undefined;
        };
    } | {
        type: "initial_data_load";
        event_type: "initial_data_load";
        tenant_id: string;
        payload: {
            accounts: {
                id: string;
                name: string;
                description?: string | undefined;
                note?: string | undefined;
                accountType: import("@/types").AccountType;
                isActive: boolean;
                isOfflineBudget: boolean;
                accountGroupId: string;
                sortOrder: number;
                iban?: string | undefined;
                balance: number;
                creditLimit?: number | undefined;
                offset: number;
                logo_path: string | null;
                updatedAt?: string | undefined;
            }[];
            account_groups: {
                id: string;
                name: string;
                sortOrder: number;
                logo_path: string | null;
                updatedAt?: string | undefined;
            }[];
            categories: {
                id: string;
                name: string;
                icon?: string | undefined;
                budgeted: number;
                activity: number;
                available: number;
                isIncomeCategory: boolean;
                isHidden: boolean;
                isActive: boolean;
                sortOrder: number;
                categoryGroupId?: string | undefined;
                parentCategoryId?: string | undefined;
                isSavingsGoal?: boolean | undefined;
                goalDate?: string | undefined;
                targetAmount?: number | undefined;
                priority?: number | undefined;
                proportion?: number | undefined;
                monthlyAmount?: number | undefined;
                note?: string | undefined;
                updatedAt?: string | undefined;
            }[];
            category_groups: {
                id: string;
                name: string;
                sortOrder: number;
                isIncomeGroup: boolean;
                updatedAt?: string | undefined;
            }[];
            recipients?: {
                id: string;
                name: string;
                defaultCategoryId?: string | null | undefined;
                note?: string | undefined;
                updatedAt?: string | undefined;
            }[] | undefined;
            tags?: {
                id: string;
                name: string;
                parentTagId?: string | null | undefined;
                color?: string | undefined;
                icon?: string | undefined;
                updatedAt?: string | undefined;
            }[] | undefined;
            automation_rules?: {
                id: string;
                name: string;
                description?: string | undefined;
                stage: "PRE" | "DEFAULT" | "POST";
                conditions: {
                    type: import("@/types").RuleConditionType;
                    operator: string;
                    value: string | number | string[];
                }[];
                actions: {
                    type: import("@/types").RuleActionType;
                    field?: string | undefined;
                    value: string | string[] | number;
                }[];
                priority: number;
                isActive: boolean;
                conditionLogic?: "all" | "any" | undefined;
                updatedAt?: string | undefined;
            }[] | undefined;
            planning_transactions?: {
                id: string;
                name: string;
                accountId: string;
                categoryId: string | null;
                tagIds: string[];
                recipientId?: string | null | undefined;
                amount: number;
                amountType: import("@/types").AmountType;
                approximateAmount?: number | undefined;
                minAmount?: number | undefined;
                maxAmount?: number | undefined;
                note?: string | undefined;
                startDate: string;
                valueDate?: string | null | undefined;
                endDate?: string | null | undefined;
                recurrencePattern: import("@/types").RecurrencePattern;
                recurrenceCount?: number | null | undefined;
                recurrenceEndType: import("@/types").RecurrenceEndType;
                executionDay?: number | null | undefined;
                weekendHandling: import("@/types").WeekendHandlingType;
                transactionType?: import("@/types").TransactionType | undefined;
                counterPlanningTransactionId?: string | null | undefined;
                transferToAccountId?: string | null | undefined;
                transferToCategoryId?: string | null | undefined;
                isActive: boolean;
                forecastOnly: boolean;
                autoExecute?: boolean | undefined;
                updatedAt?: string | undefined;
            }[] | undefined;
            transactions?: {
                id: string;
                accountId: string;
                categoryId?: string | undefined;
                recipientId?: string | undefined;
                date: string;
                valueDate: string;
                amount: number;
                description: string;
                note?: string | undefined;
                tagIds: string[];
                type: import("@/types").TransactionType;
                runningBalance: number;
                counterTransactionId?: string | null | undefined;
                planningTransactionId?: string | null | undefined;
                isReconciliation?: boolean | undefined;
                isCategoryTransfer?: boolean | undefined;
                transferToAccountId?: string | null | undefined;
                reconciled?: boolean | undefined;
                toCategoryId?: string | undefined;
                payee?: string | undefined;
                createdAt?: string | undefined;
                updatedAt?: string | undefined;
            }[] | undefined;
        };
    } | {
        type: "sync_ack";
        id: string;
        status: "processed";
        entityId: string;
        entityType: import("@/types").EntityTypeEnum;
        operationType: import("@/types").SyncOperationType;
    } | {
        type: "sync_nack";
        id: string;
        status: "failed";
        entityId: string;
        entityType: import("@/types").EntityTypeEnum;
        operationType: import("@/types").SyncOperationType;
        reason: string;
        detail?: string | undefined;
    } | {
        type: "data_status_response";
        tenant_id: string;
        entity_checksums: Record<string, Record<string, any>>;
        last_sync_time: number;
    } | {
        type: "pong";
        timestamp?: number | undefined;
    } | {
        type: "connection_status_response";
        tenant_id: string;
        backend_status: string;
        connection_healthy: boolean;
        stats: Record<string, any>;
    } | {
        type: "system_notification";
        notification_type: string;
        message: string;
        timestamp: number;
    } | {
        type: "maintenance_notification";
        maintenance_enabled: boolean;
        message: string;
        timestamp: number;
    } | {
        type: "tenant_disconnect_ack";
        tenant_id: string;
        status: "success" | "error";
        message?: string | undefined;
    } | null, ServerWebSocketMessage | {
        type: "status";
        status: BackendStatus;
        message?: string | undefined;
    } | {
        type: "data_update";
        event_type: "data_update";
        tenant_id: string;
        entity_type: import("@/types").EntityTypeEnum;
        operation_type: import("@/types").SyncOperationType;
        data: {
            accounts?: {
                id: string;
                name: string;
                description?: string | undefined;
                note?: string | undefined;
                accountType: import("@/types").AccountType;
                isActive: boolean;
                isOfflineBudget: boolean;
                accountGroupId: string;
                sortOrder: number;
                iban?: string | undefined;
                balance: number;
                creditLimit?: number | undefined;
                offset: number;
                logo_path: string | null;
                updatedAt?: string | undefined;
            }[] | null | undefined;
            account_groups?: {
                id: string;
                name: string;
                sortOrder: number;
                logo_path: string | null;
                updatedAt?: string | undefined;
            }[] | null | undefined;
            categories?: {
                id: string;
                name: string;
                icon?: string | undefined;
                budgeted: number;
                activity: number;
                available: number;
                isIncomeCategory: boolean;
                isHidden: boolean;
                isActive: boolean;
                sortOrder: number;
                categoryGroupId?: string | undefined;
                parentCategoryId?: string | undefined;
                isSavingsGoal?: boolean | undefined;
                goalDate?: string | undefined;
                targetAmount?: number | undefined;
                priority?: number | undefined;
                proportion?: number | undefined;
                monthlyAmount?: number | undefined;
                note?: string | undefined;
                updatedAt?: string | undefined;
            }[] | null | undefined;
            category_groups?: {
                id: string;
                name: string;
                sortOrder: number;
                isIncomeGroup: boolean;
                updatedAt?: string | undefined;
            }[] | null | undefined;
            recipients?: {
                id: string;
                name: string;
                defaultCategoryId?: string | null | undefined;
                note?: string | undefined;
                updatedAt?: string | undefined;
            }[] | null | undefined;
            tags?: {
                id: string;
                name: string;
                parentTagId?: string | null | undefined;
                color?: string | undefined;
                icon?: string | undefined;
                updatedAt?: string | undefined;
            }[] | null | undefined;
            automation_rules?: {
                id: string;
                name: string;
                description?: string | undefined;
                stage: "PRE" | "DEFAULT" | "POST";
                conditions: {
                    type: import("@/types").RuleConditionType;
                    operator: string;
                    value: string | number | string[];
                }[];
                actions: {
                    type: import("@/types").RuleActionType;
                    field?: string | undefined;
                    value: string | string[] | number;
                }[];
                priority: number;
                isActive: boolean;
                conditionLogic?: "all" | "any" | undefined;
                updatedAt?: string | undefined;
            }[] | null | undefined;
            planning_transactions?: {
                id: string;
                name: string;
                accountId: string;
                categoryId: string | null;
                tagIds: string[];
                recipientId?: string | null | undefined;
                amount: number;
                amountType: import("@/types").AmountType;
                approximateAmount?: number | undefined;
                minAmount?: number | undefined;
                maxAmount?: number | undefined;
                note?: string | undefined;
                startDate: string;
                valueDate?: string | null | undefined;
                endDate?: string | null | undefined;
                recurrencePattern: import("@/types").RecurrencePattern;
                recurrenceCount?: number | null | undefined;
                recurrenceEndType: import("@/types").RecurrenceEndType;
                executionDay?: number | null | undefined;
                weekendHandling: import("@/types").WeekendHandlingType;
                transactionType?: import("@/types").TransactionType | undefined;
                counterPlanningTransactionId?: string | null | undefined;
                transferToAccountId?: string | null | undefined;
                transferToCategoryId?: string | null | undefined;
                isActive: boolean;
                forecastOnly: boolean;
                autoExecute?: boolean | undefined;
                updatedAt?: string | undefined;
            }[] | null | undefined;
            transactions?: {
                id: string;
                accountId: string;
                categoryId?: string | undefined;
                recipientId?: string | undefined;
                date: string;
                valueDate: string;
                amount: number;
                description: string;
                note?: string | undefined;
                tagIds: string[];
                type: import("@/types").TransactionType;
                runningBalance: number;
                counterTransactionId?: string | null | undefined;
                planningTransactionId?: string | null | undefined;
                isReconciliation?: boolean | undefined;
                isCategoryTransfer?: boolean | undefined;
                transferToAccountId?: string | null | undefined;
                reconciled?: boolean | undefined;
                toCategoryId?: string | undefined;
                payee?: string | undefined;
                createdAt?: string | undefined;
                updatedAt?: string | undefined;
            }[] | null | undefined;
            single_entity?: {
                id: string;
                name: string;
                defaultCategoryId?: string | null | undefined;
                note?: string | undefined;
                updatedAt?: string | undefined;
            } | {
                id: string;
                name: string;
                description?: string | undefined;
                note?: string | undefined;
                accountType: import("@/types").AccountType;
                isActive: boolean;
                isOfflineBudget: boolean;
                accountGroupId: string;
                sortOrder: number;
                iban?: string | undefined;
                balance: number;
                creditLimit?: number | undefined;
                offset: number;
                logo_path: string | null;
                updatedAt?: string | undefined;
            } | {
                id: string;
                name: string;
                sortOrder: number;
                logo_path: string | null;
                updatedAt?: string | undefined;
            } | {
                id: string;
                name: string;
                icon?: string | undefined;
                budgeted: number;
                activity: number;
                available: number;
                isIncomeCategory: boolean;
                isHidden: boolean;
                isActive: boolean;
                sortOrder: number;
                categoryGroupId?: string | undefined;
                parentCategoryId?: string | undefined;
                isSavingsGoal?: boolean | undefined;
                goalDate?: string | undefined;
                targetAmount?: number | undefined;
                priority?: number | undefined;
                proportion?: number | undefined;
                monthlyAmount?: number | undefined;
                note?: string | undefined;
                updatedAt?: string | undefined;
            } | {
                id: string;
                name: string;
                sortOrder: number;
                isIncomeGroup: boolean;
                updatedAt?: string | undefined;
            } | {
                id: string;
                accountId: string;
                categoryId?: string | undefined;
                recipientId?: string | undefined;
                date: string;
                valueDate: string;
                amount: number;
                description: string;
                note?: string | undefined;
                tagIds: string[];
                type: import("@/types").TransactionType;
                runningBalance: number;
                counterTransactionId?: string | null | undefined;
                planningTransactionId?: string | null | undefined;
                isReconciliation?: boolean | undefined;
                isCategoryTransfer?: boolean | undefined;
                transferToAccountId?: string | null | undefined;
                reconciled?: boolean | undefined;
                toCategoryId?: string | undefined;
                payee?: string | undefined;
                createdAt?: string | undefined;
                updatedAt?: string | undefined;
            } | {
                id: string;
                name: string;
                parentTagId?: string | null | undefined;
                color?: string | undefined;
                icon?: string | undefined;
                updatedAt?: string | undefined;
            } | {
                id: string;
                name: string;
                accountId: string;
                categoryId: string | null;
                tagIds: string[];
                recipientId?: string | null | undefined;
                amount: number;
                amountType: import("@/types").AmountType;
                approximateAmount?: number | undefined;
                minAmount?: number | undefined;
                maxAmount?: number | undefined;
                note?: string | undefined;
                startDate: string;
                valueDate?: string | null | undefined;
                endDate?: string | null | undefined;
                recurrencePattern: import("@/types").RecurrencePattern;
                recurrenceCount?: number | null | undefined;
                recurrenceEndType: import("@/types").RecurrenceEndType;
                executionDay?: number | null | undefined;
                weekendHandling: import("@/types").WeekendHandlingType;
                transactionType?: import("@/types").TransactionType | undefined;
                counterPlanningTransactionId?: string | null | undefined;
                transferToAccountId?: string | null | undefined;
                transferToCategoryId?: string | null | undefined;
                isActive: boolean;
                forecastOnly: boolean;
                autoExecute?: boolean | undefined;
                updatedAt?: string | undefined;
            } | {
                id: string;
                name: string;
                description?: string | undefined;
                stage: "PRE" | "DEFAULT" | "POST";
                conditions: {
                    type: import("@/types").RuleConditionType;
                    operator: string;
                    value: string | number | string[];
                }[];
                actions: {
                    type: import("@/types").RuleActionType;
                    field?: string | undefined;
                    value: string | string[] | number;
                }[];
                priority: number;
                isActive: boolean;
                conditionLogic?: "all" | "any" | undefined;
                updatedAt?: string | undefined;
            } | {
                id: string;
            } | undefined;
        };
    } | {
        type: "initial_data_load";
        event_type: "initial_data_load";
        tenant_id: string;
        payload: {
            accounts: {
                id: string;
                name: string;
                description?: string | undefined;
                note?: string | undefined;
                accountType: import("@/types").AccountType;
                isActive: boolean;
                isOfflineBudget: boolean;
                accountGroupId: string;
                sortOrder: number;
                iban?: string | undefined;
                balance: number;
                creditLimit?: number | undefined;
                offset: number;
                logo_path: string | null;
                updatedAt?: string | undefined;
            }[];
            account_groups: {
                id: string;
                name: string;
                sortOrder: number;
                logo_path: string | null;
                updatedAt?: string | undefined;
            }[];
            categories: {
                id: string;
                name: string;
                icon?: string | undefined;
                budgeted: number;
                activity: number;
                available: number;
                isIncomeCategory: boolean;
                isHidden: boolean;
                isActive: boolean;
                sortOrder: number;
                categoryGroupId?: string | undefined;
                parentCategoryId?: string | undefined;
                isSavingsGoal?: boolean | undefined;
                goalDate?: string | undefined;
                targetAmount?: number | undefined;
                priority?: number | undefined;
                proportion?: number | undefined;
                monthlyAmount?: number | undefined;
                note?: string | undefined;
                updatedAt?: string | undefined;
            }[];
            category_groups: {
                id: string;
                name: string;
                sortOrder: number;
                isIncomeGroup: boolean;
                updatedAt?: string | undefined;
            }[];
            recipients?: {
                id: string;
                name: string;
                defaultCategoryId?: string | null | undefined;
                note?: string | undefined;
                updatedAt?: string | undefined;
            }[] | undefined;
            tags?: {
                id: string;
                name: string;
                parentTagId?: string | null | undefined;
                color?: string | undefined;
                icon?: string | undefined;
                updatedAt?: string | undefined;
            }[] | undefined;
            automation_rules?: {
                id: string;
                name: string;
                description?: string | undefined;
                stage: "PRE" | "DEFAULT" | "POST";
                conditions: {
                    type: import("@/types").RuleConditionType;
                    operator: string;
                    value: string | number | string[];
                }[];
                actions: {
                    type: import("@/types").RuleActionType;
                    field?: string | undefined;
                    value: string | string[] | number;
                }[];
                priority: number;
                isActive: boolean;
                conditionLogic?: "all" | "any" | undefined;
                updatedAt?: string | undefined;
            }[] | undefined;
            planning_transactions?: {
                id: string;
                name: string;
                accountId: string;
                categoryId: string | null;
                tagIds: string[];
                recipientId?: string | null | undefined;
                amount: number;
                amountType: import("@/types").AmountType;
                approximateAmount?: number | undefined;
                minAmount?: number | undefined;
                maxAmount?: number | undefined;
                note?: string | undefined;
                startDate: string;
                valueDate?: string | null | undefined;
                endDate?: string | null | undefined;
                recurrencePattern: import("@/types").RecurrencePattern;
                recurrenceCount?: number | null | undefined;
                recurrenceEndType: import("@/types").RecurrenceEndType;
                executionDay?: number | null | undefined;
                weekendHandling: import("@/types").WeekendHandlingType;
                transactionType?: import("@/types").TransactionType | undefined;
                counterPlanningTransactionId?: string | null | undefined;
                transferToAccountId?: string | null | undefined;
                transferToCategoryId?: string | null | undefined;
                isActive: boolean;
                forecastOnly: boolean;
                autoExecute?: boolean | undefined;
                updatedAt?: string | undefined;
            }[] | undefined;
            transactions?: {
                id: string;
                accountId: string;
                categoryId?: string | undefined;
                recipientId?: string | undefined;
                date: string;
                valueDate: string;
                amount: number;
                description: string;
                note?: string | undefined;
                tagIds: string[];
                type: import("@/types").TransactionType;
                runningBalance: number;
                counterTransactionId?: string | null | undefined;
                planningTransactionId?: string | null | undefined;
                isReconciliation?: boolean | undefined;
                isCategoryTransfer?: boolean | undefined;
                transferToAccountId?: string | null | undefined;
                reconciled?: boolean | undefined;
                toCategoryId?: string | undefined;
                payee?: string | undefined;
                createdAt?: string | undefined;
                updatedAt?: string | undefined;
            }[] | undefined;
        };
    } | {
        type: "sync_ack";
        id: string;
        status: "processed";
        entityId: string;
        entityType: import("@/types").EntityTypeEnum;
        operationType: import("@/types").SyncOperationType;
    } | {
        type: "sync_nack";
        id: string;
        status: "failed";
        entityId: string;
        entityType: import("@/types").EntityTypeEnum;
        operationType: import("@/types").SyncOperationType;
        reason: string;
        detail?: string | undefined;
    } | {
        type: "data_status_response";
        tenant_id: string;
        entity_checksums: Record<string, Record<string, any>>;
        last_sync_time: number;
    } | {
        type: "pong";
        timestamp?: number | undefined;
    } | {
        type: "connection_status_response";
        tenant_id: string;
        backend_status: string;
        connection_healthy: boolean;
        stats: Record<string, any>;
    } | {
        type: "system_notification";
        notification_type: string;
        message: string;
        timestamp: number;
    } | {
        type: "maintenance_notification";
        maintenance_enabled: boolean;
        message: string;
        timestamp: number;
    } | {
        type: "tenant_disconnect_ack";
        tenant_id: string;
        status: "success" | "error";
        message?: string | undefined;
    } | null>;
    syncState: import("vue").Ref<{
        isAutoSyncEnabled: boolean;
        lastAutoSyncTime: number | null;
        nextAutoSyncTime: number | null;
        queueStatistics: {
            pendingCount: number;
            processingCount: number;
            failedCount: number;
            lastSyncTime: number | null;
            oldestPendingTime: number | null;
            totalSyncedToday: number;
            averageSyncDuration: number;
            lastErrorMessage: string | null;
        } | null;
        syncInProgress: boolean;
        syncAnimationEndTime: number | null;
        periodicSyncInterval: number;
    }, SyncState | {
        isAutoSyncEnabled: boolean;
        lastAutoSyncTime: number | null;
        nextAutoSyncTime: number | null;
        queueStatistics: {
            pendingCount: number;
            processingCount: number;
            failedCount: number;
            lastSyncTime: number | null;
            oldestPendingTime: number | null;
            totalSyncedToday: number;
            averageSyncDuration: number;
            lastErrorMessage: string | null;
        } | null;
        syncInProgress: boolean;
        syncAnimationEndTime: number | null;
        periodicSyncInterval: number;
    }>;
    setConnectionStatus: (newStatus: WebSocketConnectionStatus) => void;
    setBackendStatus: (newStatus: BackendStatus) => void;
    setError: (errorMessage: string | null) => void;
    setLastMessage: (message: ServerWebSocketMessage) => void;
    reset: () => void;
    setSyncInProgress: (inProgress: boolean, minimumDuration?: number) => void;
    updateQueueStatistics: (stats: QueueStatistics) => void;
    setAutoSyncEnabled: (enabled: boolean) => void;
    setPeriodicSyncInterval: (intervalMs: number) => void;
    updateLastAutoSyncTime: (timestamp?: number | null) => void;
    recordSyncMetrics: (duration: number, success: boolean, error?: string) => void;
}, never>, Pick<{
    connectionStatus: import("vue").Ref<WebSocketConnectionStatus, WebSocketConnectionStatus>;
    backendStatus: import("vue").Ref<BackendStatus, BackendStatus>;
    lastError: import("vue").Ref<string | null, string | null>;
    lastMessage: import("vue").Ref<{
        type: "status";
        status: BackendStatus;
        message?: string | undefined;
    } | {
        type: "data_update";
        event_type: "data_update";
        tenant_id: string;
        entity_type: import("@/types").EntityTypeEnum;
        operation_type: import("@/types").SyncOperationType;
        data: {
            accounts?: {
                id: string;
                name: string;
                description?: string | undefined;
                note?: string | undefined;
                accountType: import("@/types").AccountType;
                isActive: boolean;
                isOfflineBudget: boolean;
                accountGroupId: string;
                sortOrder: number;
                iban?: string | undefined;
                balance: number;
                creditLimit?: number | undefined;
                offset: number;
                logo_path: string | null;
                updatedAt?: string | undefined;
            }[] | null | undefined;
            account_groups?: {
                id: string;
                name: string;
                sortOrder: number;
                logo_path: string | null;
                updatedAt?: string | undefined;
            }[] | null | undefined;
            categories?: {
                id: string;
                name: string;
                icon?: string | undefined;
                budgeted: number;
                activity: number;
                available: number;
                isIncomeCategory: boolean;
                isHidden: boolean;
                isActive: boolean;
                sortOrder: number;
                categoryGroupId?: string | undefined;
                parentCategoryId?: string | undefined;
                isSavingsGoal?: boolean | undefined;
                goalDate?: string | undefined;
                targetAmount?: number | undefined;
                priority?: number | undefined;
                proportion?: number | undefined;
                monthlyAmount?: number | undefined;
                note?: string | undefined;
                updatedAt?: string | undefined;
            }[] | null | undefined;
            category_groups?: {
                id: string;
                name: string;
                sortOrder: number;
                isIncomeGroup: boolean;
                updatedAt?: string | undefined;
            }[] | null | undefined;
            recipients?: {
                id: string;
                name: string;
                defaultCategoryId?: string | null | undefined;
                note?: string | undefined;
                updatedAt?: string | undefined;
            }[] | null | undefined;
            tags?: {
                id: string;
                name: string;
                parentTagId?: string | null | undefined;
                color?: string | undefined;
                icon?: string | undefined;
                updatedAt?: string | undefined;
            }[] | null | undefined;
            automation_rules?: {
                id: string;
                name: string;
                description?: string | undefined;
                stage: "PRE" | "DEFAULT" | "POST";
                conditions: {
                    type: import("@/types").RuleConditionType;
                    operator: string;
                    value: string | number | string[];
                }[];
                actions: {
                    type: import("@/types").RuleActionType;
                    field?: string | undefined;
                    value: string | string[] | number;
                }[];
                priority: number;
                isActive: boolean;
                conditionLogic?: "all" | "any" | undefined;
                updatedAt?: string | undefined;
            }[] | null | undefined;
            planning_transactions?: {
                id: string;
                name: string;
                accountId: string;
                categoryId: string | null;
                tagIds: string[];
                recipientId?: string | null | undefined;
                amount: number;
                amountType: import("@/types").AmountType;
                approximateAmount?: number | undefined;
                minAmount?: number | undefined;
                maxAmount?: number | undefined;
                note?: string | undefined;
                startDate: string;
                valueDate?: string | null | undefined;
                endDate?: string | null | undefined;
                recurrencePattern: import("@/types").RecurrencePattern;
                recurrenceCount?: number | null | undefined;
                recurrenceEndType: import("@/types").RecurrenceEndType;
                executionDay?: number | null | undefined;
                weekendHandling: import("@/types").WeekendHandlingType;
                transactionType?: import("@/types").TransactionType | undefined;
                counterPlanningTransactionId?: string | null | undefined;
                transferToAccountId?: string | null | undefined;
                transferToCategoryId?: string | null | undefined;
                isActive: boolean;
                forecastOnly: boolean;
                autoExecute?: boolean | undefined;
                updatedAt?: string | undefined;
            }[] | null | undefined;
            transactions?: {
                id: string;
                accountId: string;
                categoryId?: string | undefined;
                recipientId?: string | undefined;
                date: string;
                valueDate: string;
                amount: number;
                description: string;
                note?: string | undefined;
                tagIds: string[];
                type: import("@/types").TransactionType;
                runningBalance: number;
                counterTransactionId?: string | null | undefined;
                planningTransactionId?: string | null | undefined;
                isReconciliation?: boolean | undefined;
                isCategoryTransfer?: boolean | undefined;
                transferToAccountId?: string | null | undefined;
                reconciled?: boolean | undefined;
                toCategoryId?: string | undefined;
                payee?: string | undefined;
                createdAt?: string | undefined;
                updatedAt?: string | undefined;
            }[] | null | undefined;
            single_entity?: {
                id: string;
                name: string;
                defaultCategoryId?: string | null | undefined;
                note?: string | undefined;
                updatedAt?: string | undefined;
            } | {
                id: string;
                name: string;
                description?: string | undefined;
                note?: string | undefined;
                accountType: import("@/types").AccountType;
                isActive: boolean;
                isOfflineBudget: boolean;
                accountGroupId: string;
                sortOrder: number;
                iban?: string | undefined;
                balance: number;
                creditLimit?: number | undefined;
                offset: number;
                logo_path: string | null;
                updatedAt?: string | undefined;
            } | {
                id: string;
                name: string;
                sortOrder: number;
                logo_path: string | null;
                updatedAt?: string | undefined;
            } | {
                id: string;
                name: string;
                icon?: string | undefined;
                budgeted: number;
                activity: number;
                available: number;
                isIncomeCategory: boolean;
                isHidden: boolean;
                isActive: boolean;
                sortOrder: number;
                categoryGroupId?: string | undefined;
                parentCategoryId?: string | undefined;
                isSavingsGoal?: boolean | undefined;
                goalDate?: string | undefined;
                targetAmount?: number | undefined;
                priority?: number | undefined;
                proportion?: number | undefined;
                monthlyAmount?: number | undefined;
                note?: string | undefined;
                updatedAt?: string | undefined;
            } | {
                id: string;
                name: string;
                sortOrder: number;
                isIncomeGroup: boolean;
                updatedAt?: string | undefined;
            } | {
                id: string;
                accountId: string;
                categoryId?: string | undefined;
                recipientId?: string | undefined;
                date: string;
                valueDate: string;
                amount: number;
                description: string;
                note?: string | undefined;
                tagIds: string[];
                type: import("@/types").TransactionType;
                runningBalance: number;
                counterTransactionId?: string | null | undefined;
                planningTransactionId?: string | null | undefined;
                isReconciliation?: boolean | undefined;
                isCategoryTransfer?: boolean | undefined;
                transferToAccountId?: string | null | undefined;
                reconciled?: boolean | undefined;
                toCategoryId?: string | undefined;
                payee?: string | undefined;
                createdAt?: string | undefined;
                updatedAt?: string | undefined;
            } | {
                id: string;
                name: string;
                parentTagId?: string | null | undefined;
                color?: string | undefined;
                icon?: string | undefined;
                updatedAt?: string | undefined;
            } | {
                id: string;
                name: string;
                accountId: string;
                categoryId: string | null;
                tagIds: string[];
                recipientId?: string | null | undefined;
                amount: number;
                amountType: import("@/types").AmountType;
                approximateAmount?: number | undefined;
                minAmount?: number | undefined;
                maxAmount?: number | undefined;
                note?: string | undefined;
                startDate: string;
                valueDate?: string | null | undefined;
                endDate?: string | null | undefined;
                recurrencePattern: import("@/types").RecurrencePattern;
                recurrenceCount?: number | null | undefined;
                recurrenceEndType: import("@/types").RecurrenceEndType;
                executionDay?: number | null | undefined;
                weekendHandling: import("@/types").WeekendHandlingType;
                transactionType?: import("@/types").TransactionType | undefined;
                counterPlanningTransactionId?: string | null | undefined;
                transferToAccountId?: string | null | undefined;
                transferToCategoryId?: string | null | undefined;
                isActive: boolean;
                forecastOnly: boolean;
                autoExecute?: boolean | undefined;
                updatedAt?: string | undefined;
            } | {
                id: string;
                name: string;
                description?: string | undefined;
                stage: "PRE" | "DEFAULT" | "POST";
                conditions: {
                    type: import("@/types").RuleConditionType;
                    operator: string;
                    value: string | number | string[];
                }[];
                actions: {
                    type: import("@/types").RuleActionType;
                    field?: string | undefined;
                    value: string | string[] | number;
                }[];
                priority: number;
                isActive: boolean;
                conditionLogic?: "all" | "any" | undefined;
                updatedAt?: string | undefined;
            } | {
                id: string;
            } | undefined;
        };
    } | {
        type: "initial_data_load";
        event_type: "initial_data_load";
        tenant_id: string;
        payload: {
            accounts: {
                id: string;
                name: string;
                description?: string | undefined;
                note?: string | undefined;
                accountType: import("@/types").AccountType;
                isActive: boolean;
                isOfflineBudget: boolean;
                accountGroupId: string;
                sortOrder: number;
                iban?: string | undefined;
                balance: number;
                creditLimit?: number | undefined;
                offset: number;
                logo_path: string | null;
                updatedAt?: string | undefined;
            }[];
            account_groups: {
                id: string;
                name: string;
                sortOrder: number;
                logo_path: string | null;
                updatedAt?: string | undefined;
            }[];
            categories: {
                id: string;
                name: string;
                icon?: string | undefined;
                budgeted: number;
                activity: number;
                available: number;
                isIncomeCategory: boolean;
                isHidden: boolean;
                isActive: boolean;
                sortOrder: number;
                categoryGroupId?: string | undefined;
                parentCategoryId?: string | undefined;
                isSavingsGoal?: boolean | undefined;
                goalDate?: string | undefined;
                targetAmount?: number | undefined;
                priority?: number | undefined;
                proportion?: number | undefined;
                monthlyAmount?: number | undefined;
                note?: string | undefined;
                updatedAt?: string | undefined;
            }[];
            category_groups: {
                id: string;
                name: string;
                sortOrder: number;
                isIncomeGroup: boolean;
                updatedAt?: string | undefined;
            }[];
            recipients?: {
                id: string;
                name: string;
                defaultCategoryId?: string | null | undefined;
                note?: string | undefined;
                updatedAt?: string | undefined;
            }[] | undefined;
            tags?: {
                id: string;
                name: string;
                parentTagId?: string | null | undefined;
                color?: string | undefined;
                icon?: string | undefined;
                updatedAt?: string | undefined;
            }[] | undefined;
            automation_rules?: {
                id: string;
                name: string;
                description?: string | undefined;
                stage: "PRE" | "DEFAULT" | "POST";
                conditions: {
                    type: import("@/types").RuleConditionType;
                    operator: string;
                    value: string | number | string[];
                }[];
                actions: {
                    type: import("@/types").RuleActionType;
                    field?: string | undefined;
                    value: string | string[] | number;
                }[];
                priority: number;
                isActive: boolean;
                conditionLogic?: "all" | "any" | undefined;
                updatedAt?: string | undefined;
            }[] | undefined;
            planning_transactions?: {
                id: string;
                name: string;
                accountId: string;
                categoryId: string | null;
                tagIds: string[];
                recipientId?: string | null | undefined;
                amount: number;
                amountType: import("@/types").AmountType;
                approximateAmount?: number | undefined;
                minAmount?: number | undefined;
                maxAmount?: number | undefined;
                note?: string | undefined;
                startDate: string;
                valueDate?: string | null | undefined;
                endDate?: string | null | undefined;
                recurrencePattern: import("@/types").RecurrencePattern;
                recurrenceCount?: number | null | undefined;
                recurrenceEndType: import("@/types").RecurrenceEndType;
                executionDay?: number | null | undefined;
                weekendHandling: import("@/types").WeekendHandlingType;
                transactionType?: import("@/types").TransactionType | undefined;
                counterPlanningTransactionId?: string | null | undefined;
                transferToAccountId?: string | null | undefined;
                transferToCategoryId?: string | null | undefined;
                isActive: boolean;
                forecastOnly: boolean;
                autoExecute?: boolean | undefined;
                updatedAt?: string | undefined;
            }[] | undefined;
            transactions?: {
                id: string;
                accountId: string;
                categoryId?: string | undefined;
                recipientId?: string | undefined;
                date: string;
                valueDate: string;
                amount: number;
                description: string;
                note?: string | undefined;
                tagIds: string[];
                type: import("@/types").TransactionType;
                runningBalance: number;
                counterTransactionId?: string | null | undefined;
                planningTransactionId?: string | null | undefined;
                isReconciliation?: boolean | undefined;
                isCategoryTransfer?: boolean | undefined;
                transferToAccountId?: string | null | undefined;
                reconciled?: boolean | undefined;
                toCategoryId?: string | undefined;
                payee?: string | undefined;
                createdAt?: string | undefined;
                updatedAt?: string | undefined;
            }[] | undefined;
        };
    } | {
        type: "sync_ack";
        id: string;
        status: "processed";
        entityId: string;
        entityType: import("@/types").EntityTypeEnum;
        operationType: import("@/types").SyncOperationType;
    } | {
        type: "sync_nack";
        id: string;
        status: "failed";
        entityId: string;
        entityType: import("@/types").EntityTypeEnum;
        operationType: import("@/types").SyncOperationType;
        reason: string;
        detail?: string | undefined;
    } | {
        type: "data_status_response";
        tenant_id: string;
        entity_checksums: Record<string, Record<string, any>>;
        last_sync_time: number;
    } | {
        type: "pong";
        timestamp?: number | undefined;
    } | {
        type: "connection_status_response";
        tenant_id: string;
        backend_status: string;
        connection_healthy: boolean;
        stats: Record<string, any>;
    } | {
        type: "system_notification";
        notification_type: string;
        message: string;
        timestamp: number;
    } | {
        type: "maintenance_notification";
        maintenance_enabled: boolean;
        message: string;
        timestamp: number;
    } | {
        type: "tenant_disconnect_ack";
        tenant_id: string;
        status: "success" | "error";
        message?: string | undefined;
    } | null, ServerWebSocketMessage | {
        type: "status";
        status: BackendStatus;
        message?: string | undefined;
    } | {
        type: "data_update";
        event_type: "data_update";
        tenant_id: string;
        entity_type: import("@/types").EntityTypeEnum;
        operation_type: import("@/types").SyncOperationType;
        data: {
            accounts?: {
                id: string;
                name: string;
                description?: string | undefined;
                note?: string | undefined;
                accountType: import("@/types").AccountType;
                isActive: boolean;
                isOfflineBudget: boolean;
                accountGroupId: string;
                sortOrder: number;
                iban?: string | undefined;
                balance: number;
                creditLimit?: number | undefined;
                offset: number;
                logo_path: string | null;
                updatedAt?: string | undefined;
            }[] | null | undefined;
            account_groups?: {
                id: string;
                name: string;
                sortOrder: number;
                logo_path: string | null;
                updatedAt?: string | undefined;
            }[] | null | undefined;
            categories?: {
                id: string;
                name: string;
                icon?: string | undefined;
                budgeted: number;
                activity: number;
                available: number;
                isIncomeCategory: boolean;
                isHidden: boolean;
                isActive: boolean;
                sortOrder: number;
                categoryGroupId?: string | undefined;
                parentCategoryId?: string | undefined;
                isSavingsGoal?: boolean | undefined;
                goalDate?: string | undefined;
                targetAmount?: number | undefined;
                priority?: number | undefined;
                proportion?: number | undefined;
                monthlyAmount?: number | undefined;
                note?: string | undefined;
                updatedAt?: string | undefined;
            }[] | null | undefined;
            category_groups?: {
                id: string;
                name: string;
                sortOrder: number;
                isIncomeGroup: boolean;
                updatedAt?: string | undefined;
            }[] | null | undefined;
            recipients?: {
                id: string;
                name: string;
                defaultCategoryId?: string | null | undefined;
                note?: string | undefined;
                updatedAt?: string | undefined;
            }[] | null | undefined;
            tags?: {
                id: string;
                name: string;
                parentTagId?: string | null | undefined;
                color?: string | undefined;
                icon?: string | undefined;
                updatedAt?: string | undefined;
            }[] | null | undefined;
            automation_rules?: {
                id: string;
                name: string;
                description?: string | undefined;
                stage: "PRE" | "DEFAULT" | "POST";
                conditions: {
                    type: import("@/types").RuleConditionType;
                    operator: string;
                    value: string | number | string[];
                }[];
                actions: {
                    type: import("@/types").RuleActionType;
                    field?: string | undefined;
                    value: string | string[] | number;
                }[];
                priority: number;
                isActive: boolean;
                conditionLogic?: "all" | "any" | undefined;
                updatedAt?: string | undefined;
            }[] | null | undefined;
            planning_transactions?: {
                id: string;
                name: string;
                accountId: string;
                categoryId: string | null;
                tagIds: string[];
                recipientId?: string | null | undefined;
                amount: number;
                amountType: import("@/types").AmountType;
                approximateAmount?: number | undefined;
                minAmount?: number | undefined;
                maxAmount?: number | undefined;
                note?: string | undefined;
                startDate: string;
                valueDate?: string | null | undefined;
                endDate?: string | null | undefined;
                recurrencePattern: import("@/types").RecurrencePattern;
                recurrenceCount?: number | null | undefined;
                recurrenceEndType: import("@/types").RecurrenceEndType;
                executionDay?: number | null | undefined;
                weekendHandling: import("@/types").WeekendHandlingType;
                transactionType?: import("@/types").TransactionType | undefined;
                counterPlanningTransactionId?: string | null | undefined;
                transferToAccountId?: string | null | undefined;
                transferToCategoryId?: string | null | undefined;
                isActive: boolean;
                forecastOnly: boolean;
                autoExecute?: boolean | undefined;
                updatedAt?: string | undefined;
            }[] | null | undefined;
            transactions?: {
                id: string;
                accountId: string;
                categoryId?: string | undefined;
                recipientId?: string | undefined;
                date: string;
                valueDate: string;
                amount: number;
                description: string;
                note?: string | undefined;
                tagIds: string[];
                type: import("@/types").TransactionType;
                runningBalance: number;
                counterTransactionId?: string | null | undefined;
                planningTransactionId?: string | null | undefined;
                isReconciliation?: boolean | undefined;
                isCategoryTransfer?: boolean | undefined;
                transferToAccountId?: string | null | undefined;
                reconciled?: boolean | undefined;
                toCategoryId?: string | undefined;
                payee?: string | undefined;
                createdAt?: string | undefined;
                updatedAt?: string | undefined;
            }[] | null | undefined;
            single_entity?: {
                id: string;
                name: string;
                defaultCategoryId?: string | null | undefined;
                note?: string | undefined;
                updatedAt?: string | undefined;
            } | {
                id: string;
                name: string;
                description?: string | undefined;
                note?: string | undefined;
                accountType: import("@/types").AccountType;
                isActive: boolean;
                isOfflineBudget: boolean;
                accountGroupId: string;
                sortOrder: number;
                iban?: string | undefined;
                balance: number;
                creditLimit?: number | undefined;
                offset: number;
                logo_path: string | null;
                updatedAt?: string | undefined;
            } | {
                id: string;
                name: string;
                sortOrder: number;
                logo_path: string | null;
                updatedAt?: string | undefined;
            } | {
                id: string;
                name: string;
                icon?: string | undefined;
                budgeted: number;
                activity: number;
                available: number;
                isIncomeCategory: boolean;
                isHidden: boolean;
                isActive: boolean;
                sortOrder: number;
                categoryGroupId?: string | undefined;
                parentCategoryId?: string | undefined;
                isSavingsGoal?: boolean | undefined;
                goalDate?: string | undefined;
                targetAmount?: number | undefined;
                priority?: number | undefined;
                proportion?: number | undefined;
                monthlyAmount?: number | undefined;
                note?: string | undefined;
                updatedAt?: string | undefined;
            } | {
                id: string;
                name: string;
                sortOrder: number;
                isIncomeGroup: boolean;
                updatedAt?: string | undefined;
            } | {
                id: string;
                accountId: string;
                categoryId?: string | undefined;
                recipientId?: string | undefined;
                date: string;
                valueDate: string;
                amount: number;
                description: string;
                note?: string | undefined;
                tagIds: string[];
                type: import("@/types").TransactionType;
                runningBalance: number;
                counterTransactionId?: string | null | undefined;
                planningTransactionId?: string | null | undefined;
                isReconciliation?: boolean | undefined;
                isCategoryTransfer?: boolean | undefined;
                transferToAccountId?: string | null | undefined;
                reconciled?: boolean | undefined;
                toCategoryId?: string | undefined;
                payee?: string | undefined;
                createdAt?: string | undefined;
                updatedAt?: string | undefined;
            } | {
                id: string;
                name: string;
                parentTagId?: string | null | undefined;
                color?: string | undefined;
                icon?: string | undefined;
                updatedAt?: string | undefined;
            } | {
                id: string;
                name: string;
                accountId: string;
                categoryId: string | null;
                tagIds: string[];
                recipientId?: string | null | undefined;
                amount: number;
                amountType: import("@/types").AmountType;
                approximateAmount?: number | undefined;
                minAmount?: number | undefined;
                maxAmount?: number | undefined;
                note?: string | undefined;
                startDate: string;
                valueDate?: string | null | undefined;
                endDate?: string | null | undefined;
                recurrencePattern: import("@/types").RecurrencePattern;
                recurrenceCount?: number | null | undefined;
                recurrenceEndType: import("@/types").RecurrenceEndType;
                executionDay?: number | null | undefined;
                weekendHandling: import("@/types").WeekendHandlingType;
                transactionType?: import("@/types").TransactionType | undefined;
                counterPlanningTransactionId?: string | null | undefined;
                transferToAccountId?: string | null | undefined;
                transferToCategoryId?: string | null | undefined;
                isActive: boolean;
                forecastOnly: boolean;
                autoExecute?: boolean | undefined;
                updatedAt?: string | undefined;
            } | {
                id: string;
                name: string;
                description?: string | undefined;
                stage: "PRE" | "DEFAULT" | "POST";
                conditions: {
                    type: import("@/types").RuleConditionType;
                    operator: string;
                    value: string | number | string[];
                }[];
                actions: {
                    type: import("@/types").RuleActionType;
                    field?: string | undefined;
                    value: string | string[] | number;
                }[];
                priority: number;
                isActive: boolean;
                conditionLogic?: "all" | "any" | undefined;
                updatedAt?: string | undefined;
            } | {
                id: string;
            } | undefined;
        };
    } | {
        type: "initial_data_load";
        event_type: "initial_data_load";
        tenant_id: string;
        payload: {
            accounts: {
                id: string;
                name: string;
                description?: string | undefined;
                note?: string | undefined;
                accountType: import("@/types").AccountType;
                isActive: boolean;
                isOfflineBudget: boolean;
                accountGroupId: string;
                sortOrder: number;
                iban?: string | undefined;
                balance: number;
                creditLimit?: number | undefined;
                offset: number;
                logo_path: string | null;
                updatedAt?: string | undefined;
            }[];
            account_groups: {
                id: string;
                name: string;
                sortOrder: number;
                logo_path: string | null;
                updatedAt?: string | undefined;
            }[];
            categories: {
                id: string;
                name: string;
                icon?: string | undefined;
                budgeted: number;
                activity: number;
                available: number;
                isIncomeCategory: boolean;
                isHidden: boolean;
                isActive: boolean;
                sortOrder: number;
                categoryGroupId?: string | undefined;
                parentCategoryId?: string | undefined;
                isSavingsGoal?: boolean | undefined;
                goalDate?: string | undefined;
                targetAmount?: number | undefined;
                priority?: number | undefined;
                proportion?: number | undefined;
                monthlyAmount?: number | undefined;
                note?: string | undefined;
                updatedAt?: string | undefined;
            }[];
            category_groups: {
                id: string;
                name: string;
                sortOrder: number;
                isIncomeGroup: boolean;
                updatedAt?: string | undefined;
            }[];
            recipients?: {
                id: string;
                name: string;
                defaultCategoryId?: string | null | undefined;
                note?: string | undefined;
                updatedAt?: string | undefined;
            }[] | undefined;
            tags?: {
                id: string;
                name: string;
                parentTagId?: string | null | undefined;
                color?: string | undefined;
                icon?: string | undefined;
                updatedAt?: string | undefined;
            }[] | undefined;
            automation_rules?: {
                id: string;
                name: string;
                description?: string | undefined;
                stage: "PRE" | "DEFAULT" | "POST";
                conditions: {
                    type: import("@/types").RuleConditionType;
                    operator: string;
                    value: string | number | string[];
                }[];
                actions: {
                    type: import("@/types").RuleActionType;
                    field?: string | undefined;
                    value: string | string[] | number;
                }[];
                priority: number;
                isActive: boolean;
                conditionLogic?: "all" | "any" | undefined;
                updatedAt?: string | undefined;
            }[] | undefined;
            planning_transactions?: {
                id: string;
                name: string;
                accountId: string;
                categoryId: string | null;
                tagIds: string[];
                recipientId?: string | null | undefined;
                amount: number;
                amountType: import("@/types").AmountType;
                approximateAmount?: number | undefined;
                minAmount?: number | undefined;
                maxAmount?: number | undefined;
                note?: string | undefined;
                startDate: string;
                valueDate?: string | null | undefined;
                endDate?: string | null | undefined;
                recurrencePattern: import("@/types").RecurrencePattern;
                recurrenceCount?: number | null | undefined;
                recurrenceEndType: import("@/types").RecurrenceEndType;
                executionDay?: number | null | undefined;
                weekendHandling: import("@/types").WeekendHandlingType;
                transactionType?: import("@/types").TransactionType | undefined;
                counterPlanningTransactionId?: string | null | undefined;
                transferToAccountId?: string | null | undefined;
                transferToCategoryId?: string | null | undefined;
                isActive: boolean;
                forecastOnly: boolean;
                autoExecute?: boolean | undefined;
                updatedAt?: string | undefined;
            }[] | undefined;
            transactions?: {
                id: string;
                accountId: string;
                categoryId?: string | undefined;
                recipientId?: string | undefined;
                date: string;
                valueDate: string;
                amount: number;
                description: string;
                note?: string | undefined;
                tagIds: string[];
                type: import("@/types").TransactionType;
                runningBalance: number;
                counterTransactionId?: string | null | undefined;
                planningTransactionId?: string | null | undefined;
                isReconciliation?: boolean | undefined;
                isCategoryTransfer?: boolean | undefined;
                transferToAccountId?: string | null | undefined;
                reconciled?: boolean | undefined;
                toCategoryId?: string | undefined;
                payee?: string | undefined;
                createdAt?: string | undefined;
                updatedAt?: string | undefined;
            }[] | undefined;
        };
    } | {
        type: "sync_ack";
        id: string;
        status: "processed";
        entityId: string;
        entityType: import("@/types").EntityTypeEnum;
        operationType: import("@/types").SyncOperationType;
    } | {
        type: "sync_nack";
        id: string;
        status: "failed";
        entityId: string;
        entityType: import("@/types").EntityTypeEnum;
        operationType: import("@/types").SyncOperationType;
        reason: string;
        detail?: string | undefined;
    } | {
        type: "data_status_response";
        tenant_id: string;
        entity_checksums: Record<string, Record<string, any>>;
        last_sync_time: number;
    } | {
        type: "pong";
        timestamp?: number | undefined;
    } | {
        type: "connection_status_response";
        tenant_id: string;
        backend_status: string;
        connection_healthy: boolean;
        stats: Record<string, any>;
    } | {
        type: "system_notification";
        notification_type: string;
        message: string;
        timestamp: number;
    } | {
        type: "maintenance_notification";
        maintenance_enabled: boolean;
        message: string;
        timestamp: number;
    } | {
        type: "tenant_disconnect_ack";
        tenant_id: string;
        status: "success" | "error";
        message?: string | undefined;
    } | null>;
    syncState: import("vue").Ref<{
        isAutoSyncEnabled: boolean;
        lastAutoSyncTime: number | null;
        nextAutoSyncTime: number | null;
        queueStatistics: {
            pendingCount: number;
            processingCount: number;
            failedCount: number;
            lastSyncTime: number | null;
            oldestPendingTime: number | null;
            totalSyncedToday: number;
            averageSyncDuration: number;
            lastErrorMessage: string | null;
        } | null;
        syncInProgress: boolean;
        syncAnimationEndTime: number | null;
        periodicSyncInterval: number;
    }, SyncState | {
        isAutoSyncEnabled: boolean;
        lastAutoSyncTime: number | null;
        nextAutoSyncTime: number | null;
        queueStatistics: {
            pendingCount: number;
            processingCount: number;
            failedCount: number;
            lastSyncTime: number | null;
            oldestPendingTime: number | null;
            totalSyncedToday: number;
            averageSyncDuration: number;
            lastErrorMessage: string | null;
        } | null;
        syncInProgress: boolean;
        syncAnimationEndTime: number | null;
        periodicSyncInterval: number;
    }>;
    setConnectionStatus: (newStatus: WebSocketConnectionStatus) => void;
    setBackendStatus: (newStatus: BackendStatus) => void;
    setError: (errorMessage: string | null) => void;
    setLastMessage: (message: ServerWebSocketMessage) => void;
    reset: () => void;
    setSyncInProgress: (inProgress: boolean, minimumDuration?: number) => void;
    updateQueueStatistics: (stats: QueueStatistics) => void;
    setAutoSyncEnabled: (enabled: boolean) => void;
    setPeriodicSyncInterval: (intervalMs: number) => void;
    updateLastAutoSyncTime: (timestamp?: number | null) => void;
    recordSyncMetrics: (duration: number, success: boolean, error?: string) => void;
}, "reset" | "setConnectionStatus" | "setBackendStatus" | "setError" | "setLastMessage" | "setSyncInProgress" | "updateQueueStatistics" | "setAutoSyncEnabled" | "setPeriodicSyncInterval" | "updateLastAutoSyncTime" | "recordSyncMetrics">>;
