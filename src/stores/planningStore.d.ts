/**
 * Store für geplante Transaktionen – tenant-spezifisch persistiert via IndexedDB.
 */
import { PlanningTransaction, RecurrencePattern, AmountType, RecurrenceEndType, WeekendHandlingType, SyncOperationType } from '@/types';
export declare const usePlanningStore: import("pinia").StoreDefinition<"planning", Pick<{
    planningTransactions: import("vue").Ref<{
        id: string;
        name: string;
        accountId: string;
        categoryId: string | null;
        tagIds: string[];
        recipientId?: string | null | undefined;
        amount: number;
        amountType: AmountType;
        approximateAmount?: number | undefined;
        minAmount?: number | undefined;
        maxAmount?: number | undefined;
        note?: string | undefined;
        startDate: string;
        valueDate?: string | null | undefined;
        endDate?: string | null | undefined;
        recurrencePattern: RecurrencePattern;
        recurrenceCount?: number | null | undefined;
        recurrenceEndType: RecurrenceEndType;
        executionDay?: number | null | undefined;
        weekendHandling: WeekendHandlingType;
        transactionType?: import("@/types").TransactionType | undefined;
        counterPlanningTransactionId?: string | null | undefined;
        transferToAccountId?: string | null | undefined;
        transferToCategoryId?: string | null | undefined;
        isActive: boolean;
        forecastOnly: boolean;
        autoExecute?: boolean | undefined;
        updatedAt?: string | undefined;
    }[], PlanningTransaction[] | {
        id: string;
        name: string;
        accountId: string;
        categoryId: string | null;
        tagIds: string[];
        recipientId?: string | null | undefined;
        amount: number;
        amountType: AmountType;
        approximateAmount?: number | undefined;
        minAmount?: number | undefined;
        maxAmount?: number | undefined;
        note?: string | undefined;
        startDate: string;
        valueDate?: string | null | undefined;
        endDate?: string | null | undefined;
        recurrencePattern: RecurrencePattern;
        recurrenceCount?: number | null | undefined;
        recurrenceEndType: RecurrenceEndType;
        executionDay?: number | null | undefined;
        weekendHandling: WeekendHandlingType;
        transactionType?: import("@/types").TransactionType | undefined;
        counterPlanningTransactionId?: string | null | undefined;
        transferToAccountId?: string | null | undefined;
        transferToCategoryId?: string | null | undefined;
        isActive: boolean;
        forecastOnly: boolean;
        autoExecute?: boolean | undefined;
        updatedAt?: string | undefined;
    }[]>;
    getPlanningTransactionById: import("vue").ComputedRef<(id: string) => {
        id: string;
        name: string;
        accountId: string;
        categoryId: string | null;
        tagIds: string[];
        recipientId?: string | null | undefined;
        amount: number;
        amountType: AmountType;
        approximateAmount?: number | undefined;
        minAmount?: number | undefined;
        maxAmount?: number | undefined;
        note?: string | undefined;
        startDate: string;
        valueDate?: string | null | undefined;
        endDate?: string | null | undefined;
        recurrencePattern: RecurrencePattern;
        recurrenceCount?: number | null | undefined;
        recurrenceEndType: RecurrenceEndType;
        executionDay?: number | null | undefined;
        weekendHandling: WeekendHandlingType;
        transactionType?: import("@/types").TransactionType | undefined;
        counterPlanningTransactionId?: string | null | undefined;
        transferToAccountId?: string | null | undefined;
        transferToCategoryId?: string | null | undefined;
        isActive: boolean;
        forecastOnly: boolean;
        autoExecute?: boolean | undefined;
        updatedAt?: string | undefined;
    } | undefined>;
    getUpcomingTransactions: import("vue").ComputedRef<(days?: number, startDate?: string) => {
        date: string;
        transaction: PlanningTransaction;
    }[]>;
    addPlanningTransaction: (p: Partial<PlanningTransaction>, fromSync?: boolean) => Promise<PlanningTransaction>;
    addMultiplePlanningTransactions: (planningTransactionsToAdd: Partial<PlanningTransaction>[], fromSync?: boolean) => Promise<PlanningTransaction[]>;
    updatePlanningTransaction: (id: string, upd: Partial<PlanningTransaction>, fromSync?: boolean) => Promise<boolean>;
    deletePlanningTransaction: (id: string, fromSync?: boolean) => Promise<boolean>;
    loadPlanningTransactions: () => Promise<void>;
    savePlanningTransactions: () => void;
    reset: () => Promise<void>;
    handleSyncMessage: (operation: SyncOperationType, planningTransaction: PlanningTransaction) => void;
}, "planningTransactions">, Pick<{
    planningTransactions: import("vue").Ref<{
        id: string;
        name: string;
        accountId: string;
        categoryId: string | null;
        tagIds: string[];
        recipientId?: string | null | undefined;
        amount: number;
        amountType: AmountType;
        approximateAmount?: number | undefined;
        minAmount?: number | undefined;
        maxAmount?: number | undefined;
        note?: string | undefined;
        startDate: string;
        valueDate?: string | null | undefined;
        endDate?: string | null | undefined;
        recurrencePattern: RecurrencePattern;
        recurrenceCount?: number | null | undefined;
        recurrenceEndType: RecurrenceEndType;
        executionDay?: number | null | undefined;
        weekendHandling: WeekendHandlingType;
        transactionType?: import("@/types").TransactionType | undefined;
        counterPlanningTransactionId?: string | null | undefined;
        transferToAccountId?: string | null | undefined;
        transferToCategoryId?: string | null | undefined;
        isActive: boolean;
        forecastOnly: boolean;
        autoExecute?: boolean | undefined;
        updatedAt?: string | undefined;
    }[], PlanningTransaction[] | {
        id: string;
        name: string;
        accountId: string;
        categoryId: string | null;
        tagIds: string[];
        recipientId?: string | null | undefined;
        amount: number;
        amountType: AmountType;
        approximateAmount?: number | undefined;
        minAmount?: number | undefined;
        maxAmount?: number | undefined;
        note?: string | undefined;
        startDate: string;
        valueDate?: string | null | undefined;
        endDate?: string | null | undefined;
        recurrencePattern: RecurrencePattern;
        recurrenceCount?: number | null | undefined;
        recurrenceEndType: RecurrenceEndType;
        executionDay?: number | null | undefined;
        weekendHandling: WeekendHandlingType;
        transactionType?: import("@/types").TransactionType | undefined;
        counterPlanningTransactionId?: string | null | undefined;
        transferToAccountId?: string | null | undefined;
        transferToCategoryId?: string | null | undefined;
        isActive: boolean;
        forecastOnly: boolean;
        autoExecute?: boolean | undefined;
        updatedAt?: string | undefined;
    }[]>;
    getPlanningTransactionById: import("vue").ComputedRef<(id: string) => {
        id: string;
        name: string;
        accountId: string;
        categoryId: string | null;
        tagIds: string[];
        recipientId?: string | null | undefined;
        amount: number;
        amountType: AmountType;
        approximateAmount?: number | undefined;
        minAmount?: number | undefined;
        maxAmount?: number | undefined;
        note?: string | undefined;
        startDate: string;
        valueDate?: string | null | undefined;
        endDate?: string | null | undefined;
        recurrencePattern: RecurrencePattern;
        recurrenceCount?: number | null | undefined;
        recurrenceEndType: RecurrenceEndType;
        executionDay?: number | null | undefined;
        weekendHandling: WeekendHandlingType;
        transactionType?: import("@/types").TransactionType | undefined;
        counterPlanningTransactionId?: string | null | undefined;
        transferToAccountId?: string | null | undefined;
        transferToCategoryId?: string | null | undefined;
        isActive: boolean;
        forecastOnly: boolean;
        autoExecute?: boolean | undefined;
        updatedAt?: string | undefined;
    } | undefined>;
    getUpcomingTransactions: import("vue").ComputedRef<(days?: number, startDate?: string) => {
        date: string;
        transaction: PlanningTransaction;
    }[]>;
    addPlanningTransaction: (p: Partial<PlanningTransaction>, fromSync?: boolean) => Promise<PlanningTransaction>;
    addMultiplePlanningTransactions: (planningTransactionsToAdd: Partial<PlanningTransaction>[], fromSync?: boolean) => Promise<PlanningTransaction[]>;
    updatePlanningTransaction: (id: string, upd: Partial<PlanningTransaction>, fromSync?: boolean) => Promise<boolean>;
    deletePlanningTransaction: (id: string, fromSync?: boolean) => Promise<boolean>;
    loadPlanningTransactions: () => Promise<void>;
    savePlanningTransactions: () => void;
    reset: () => Promise<void>;
    handleSyncMessage: (operation: SyncOperationType, planningTransaction: PlanningTransaction) => void;
}, "getPlanningTransactionById" | "getUpcomingTransactions">, Pick<{
    planningTransactions: import("vue").Ref<{
        id: string;
        name: string;
        accountId: string;
        categoryId: string | null;
        tagIds: string[];
        recipientId?: string | null | undefined;
        amount: number;
        amountType: AmountType;
        approximateAmount?: number | undefined;
        minAmount?: number | undefined;
        maxAmount?: number | undefined;
        note?: string | undefined;
        startDate: string;
        valueDate?: string | null | undefined;
        endDate?: string | null | undefined;
        recurrencePattern: RecurrencePattern;
        recurrenceCount?: number | null | undefined;
        recurrenceEndType: RecurrenceEndType;
        executionDay?: number | null | undefined;
        weekendHandling: WeekendHandlingType;
        transactionType?: import("@/types").TransactionType | undefined;
        counterPlanningTransactionId?: string | null | undefined;
        transferToAccountId?: string | null | undefined;
        transferToCategoryId?: string | null | undefined;
        isActive: boolean;
        forecastOnly: boolean;
        autoExecute?: boolean | undefined;
        updatedAt?: string | undefined;
    }[], PlanningTransaction[] | {
        id: string;
        name: string;
        accountId: string;
        categoryId: string | null;
        tagIds: string[];
        recipientId?: string | null | undefined;
        amount: number;
        amountType: AmountType;
        approximateAmount?: number | undefined;
        minAmount?: number | undefined;
        maxAmount?: number | undefined;
        note?: string | undefined;
        startDate: string;
        valueDate?: string | null | undefined;
        endDate?: string | null | undefined;
        recurrencePattern: RecurrencePattern;
        recurrenceCount?: number | null | undefined;
        recurrenceEndType: RecurrenceEndType;
        executionDay?: number | null | undefined;
        weekendHandling: WeekendHandlingType;
        transactionType?: import("@/types").TransactionType | undefined;
        counterPlanningTransactionId?: string | null | undefined;
        transferToAccountId?: string | null | undefined;
        transferToCategoryId?: string | null | undefined;
        isActive: boolean;
        forecastOnly: boolean;
        autoExecute?: boolean | undefined;
        updatedAt?: string | undefined;
    }[]>;
    getPlanningTransactionById: import("vue").ComputedRef<(id: string) => {
        id: string;
        name: string;
        accountId: string;
        categoryId: string | null;
        tagIds: string[];
        recipientId?: string | null | undefined;
        amount: number;
        amountType: AmountType;
        approximateAmount?: number | undefined;
        minAmount?: number | undefined;
        maxAmount?: number | undefined;
        note?: string | undefined;
        startDate: string;
        valueDate?: string | null | undefined;
        endDate?: string | null | undefined;
        recurrencePattern: RecurrencePattern;
        recurrenceCount?: number | null | undefined;
        recurrenceEndType: RecurrenceEndType;
        executionDay?: number | null | undefined;
        weekendHandling: WeekendHandlingType;
        transactionType?: import("@/types").TransactionType | undefined;
        counterPlanningTransactionId?: string | null | undefined;
        transferToAccountId?: string | null | undefined;
        transferToCategoryId?: string | null | undefined;
        isActive: boolean;
        forecastOnly: boolean;
        autoExecute?: boolean | undefined;
        updatedAt?: string | undefined;
    } | undefined>;
    getUpcomingTransactions: import("vue").ComputedRef<(days?: number, startDate?: string) => {
        date: string;
        transaction: PlanningTransaction;
    }[]>;
    addPlanningTransaction: (p: Partial<PlanningTransaction>, fromSync?: boolean) => Promise<PlanningTransaction>;
    addMultiplePlanningTransactions: (planningTransactionsToAdd: Partial<PlanningTransaction>[], fromSync?: boolean) => Promise<PlanningTransaction[]>;
    updatePlanningTransaction: (id: string, upd: Partial<PlanningTransaction>, fromSync?: boolean) => Promise<boolean>;
    deletePlanningTransaction: (id: string, fromSync?: boolean) => Promise<boolean>;
    loadPlanningTransactions: () => Promise<void>;
    savePlanningTransactions: () => void;
    reset: () => Promise<void>;
    handleSyncMessage: (operation: SyncOperationType, planningTransaction: PlanningTransaction) => void;
}, "reset" | "addPlanningTransaction" | "addMultiplePlanningTransactions" | "updatePlanningTransaction" | "deletePlanningTransaction" | "loadPlanningTransactions" | "savePlanningTransactions" | "handleSyncMessage">>;
