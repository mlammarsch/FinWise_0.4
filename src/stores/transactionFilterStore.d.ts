import { TransactionType } from '../types';
export declare const useTransactionFilterStore: import("pinia").StoreDefinition<"transactionFilter", Pick<{
    searchQuery: import("vue").Ref<string, string>;
    selectedAccountId: import("vue").Ref<string, string>;
    selectedTransactionType: import("vue").Ref<string, string>;
    selectedReconciledFilter: import("vue").Ref<string, string>;
    selectedTagId: import("vue").Ref<string, string>;
    selectedCategoryId: import("vue").Ref<string, string>;
    dateRange: import("vue").Ref<{
        start: string;
        end: string;
    }, {
        start: string;
        end: string;
    } | {
        start: string;
        end: string;
    }>;
    currentViewMode: import("vue").Ref<"account" | "category", "account" | "category">;
    sortKey: import("vue").Ref<string, string>;
    sortOrder: import("vue").Ref<"desc" | "asc", "desc" | "asc">;
    filteredTransactions: import("vue").ComputedRef<{
        tagIds: string[];
        payee: string;
        counterTransactionId: string | null;
        planningTransactionId: string | null;
        isReconciliation: boolean;
        runningBalance: number;
        transferToAccountId?: string | null | undefined;
        updated_at?: string | undefined;
        createdAt?: string | undefined;
        updatedAt?: string | undefined;
        id: string;
        accountId: string;
        categoryId?: string | undefined;
        recipientId?: string | undefined;
        date: string;
        valueDate: string;
        amount: number;
        description: string;
        note?: string | undefined;
        type: TransactionType;
        isCategoryTransfer?: boolean | undefined;
        reconciled?: boolean | undefined;
        toCategoryId?: string | undefined;
    }[]>;
    filteredCategoryTransactions: import("vue").ComputedRef<{
        tagIds: string[];
        payee: string;
        counterTransactionId: string | null;
        planningTransactionId: string | null;
        isReconciliation: boolean;
        runningBalance: number;
        transferToAccountId?: string | null | undefined;
        updated_at?: string | undefined;
        createdAt?: string | undefined;
        updatedAt?: string | undefined;
        id: string;
        accountId: string;
        categoryId?: string | undefined;
        recipientId?: string | undefined;
        date: string;
        valueDate: string;
        amount: number;
        description: string;
        note?: string | undefined;
        type: TransactionType;
        isCategoryTransfer?: boolean | undefined;
        reconciled?: boolean | undefined;
        toCategoryId?: string | undefined;
    }[]>;
    sortedTransactions: import("vue").ComputedRef<{
        tagIds: string[];
        payee: string;
        counterTransactionId: string | null;
        planningTransactionId: string | null;
        isReconciliation: boolean;
        runningBalance: number;
        transferToAccountId?: string | null | undefined;
        updated_at?: string | undefined;
        createdAt?: string | undefined;
        updatedAt?: string | undefined;
        id: string;
        accountId: string;
        categoryId?: string | undefined;
        recipientId?: string | undefined;
        date: string;
        valueDate: string;
        amount: number;
        description: string;
        note?: string | undefined;
        type: TransactionType;
        isCategoryTransfer?: boolean | undefined;
        reconciled?: boolean | undefined;
        toCategoryId?: string | undefined;
    }[]>;
    sortedCategoryTransactions: import("vue").ComputedRef<{
        tagIds: string[];
        payee: string;
        counterTransactionId: string | null;
        planningTransactionId: string | null;
        isReconciliation: boolean;
        runningBalance: number;
        transferToAccountId?: string | null | undefined;
        updated_at?: string | undefined;
        createdAt?: string | undefined;
        updatedAt?: string | undefined;
        id: string;
        accountId: string;
        categoryId?: string | undefined;
        recipientId?: string | undefined;
        date: string;
        valueDate: string;
        amount: number;
        description: string;
        note?: string | undefined;
        type: TransactionType;
        isCategoryTransfer?: boolean | undefined;
        reconciled?: boolean | undefined;
        toCategoryId?: string | undefined;
    }[]>;
    saveFilters: () => void;
    loadFilters: () => void;
    clearFilters: () => void;
    updateDateRange: (start: string, end: string) => void;
    setSortKey: (key: string) => void;
}, "sortOrder" | "searchQuery" | "selectedAccountId" | "selectedTransactionType" | "selectedReconciledFilter" | "selectedTagId" | "selectedCategoryId" | "dateRange" | "currentViewMode" | "sortKey">, Pick<{
    searchQuery: import("vue").Ref<string, string>;
    selectedAccountId: import("vue").Ref<string, string>;
    selectedTransactionType: import("vue").Ref<string, string>;
    selectedReconciledFilter: import("vue").Ref<string, string>;
    selectedTagId: import("vue").Ref<string, string>;
    selectedCategoryId: import("vue").Ref<string, string>;
    dateRange: import("vue").Ref<{
        start: string;
        end: string;
    }, {
        start: string;
        end: string;
    } | {
        start: string;
        end: string;
    }>;
    currentViewMode: import("vue").Ref<"account" | "category", "account" | "category">;
    sortKey: import("vue").Ref<string, string>;
    sortOrder: import("vue").Ref<"desc" | "asc", "desc" | "asc">;
    filteredTransactions: import("vue").ComputedRef<{
        tagIds: string[];
        payee: string;
        counterTransactionId: string | null;
        planningTransactionId: string | null;
        isReconciliation: boolean;
        runningBalance: number;
        transferToAccountId?: string | null | undefined;
        updated_at?: string | undefined;
        createdAt?: string | undefined;
        updatedAt?: string | undefined;
        id: string;
        accountId: string;
        categoryId?: string | undefined;
        recipientId?: string | undefined;
        date: string;
        valueDate: string;
        amount: number;
        description: string;
        note?: string | undefined;
        type: TransactionType;
        isCategoryTransfer?: boolean | undefined;
        reconciled?: boolean | undefined;
        toCategoryId?: string | undefined;
    }[]>;
    filteredCategoryTransactions: import("vue").ComputedRef<{
        tagIds: string[];
        payee: string;
        counterTransactionId: string | null;
        planningTransactionId: string | null;
        isReconciliation: boolean;
        runningBalance: number;
        transferToAccountId?: string | null | undefined;
        updated_at?: string | undefined;
        createdAt?: string | undefined;
        updatedAt?: string | undefined;
        id: string;
        accountId: string;
        categoryId?: string | undefined;
        recipientId?: string | undefined;
        date: string;
        valueDate: string;
        amount: number;
        description: string;
        note?: string | undefined;
        type: TransactionType;
        isCategoryTransfer?: boolean | undefined;
        reconciled?: boolean | undefined;
        toCategoryId?: string | undefined;
    }[]>;
    sortedTransactions: import("vue").ComputedRef<{
        tagIds: string[];
        payee: string;
        counterTransactionId: string | null;
        planningTransactionId: string | null;
        isReconciliation: boolean;
        runningBalance: number;
        transferToAccountId?: string | null | undefined;
        updated_at?: string | undefined;
        createdAt?: string | undefined;
        updatedAt?: string | undefined;
        id: string;
        accountId: string;
        categoryId?: string | undefined;
        recipientId?: string | undefined;
        date: string;
        valueDate: string;
        amount: number;
        description: string;
        note?: string | undefined;
        type: TransactionType;
        isCategoryTransfer?: boolean | undefined;
        reconciled?: boolean | undefined;
        toCategoryId?: string | undefined;
    }[]>;
    sortedCategoryTransactions: import("vue").ComputedRef<{
        tagIds: string[];
        payee: string;
        counterTransactionId: string | null;
        planningTransactionId: string | null;
        isReconciliation: boolean;
        runningBalance: number;
        transferToAccountId?: string | null | undefined;
        updated_at?: string | undefined;
        createdAt?: string | undefined;
        updatedAt?: string | undefined;
        id: string;
        accountId: string;
        categoryId?: string | undefined;
        recipientId?: string | undefined;
        date: string;
        valueDate: string;
        amount: number;
        description: string;
        note?: string | undefined;
        type: TransactionType;
        isCategoryTransfer?: boolean | undefined;
        reconciled?: boolean | undefined;
        toCategoryId?: string | undefined;
    }[]>;
    saveFilters: () => void;
    loadFilters: () => void;
    clearFilters: () => void;
    updateDateRange: (start: string, end: string) => void;
    setSortKey: (key: string) => void;
}, "filteredTransactions" | "filteredCategoryTransactions" | "sortedTransactions" | "sortedCategoryTransactions">, Pick<{
    searchQuery: import("vue").Ref<string, string>;
    selectedAccountId: import("vue").Ref<string, string>;
    selectedTransactionType: import("vue").Ref<string, string>;
    selectedReconciledFilter: import("vue").Ref<string, string>;
    selectedTagId: import("vue").Ref<string, string>;
    selectedCategoryId: import("vue").Ref<string, string>;
    dateRange: import("vue").Ref<{
        start: string;
        end: string;
    }, {
        start: string;
        end: string;
    } | {
        start: string;
        end: string;
    }>;
    currentViewMode: import("vue").Ref<"account" | "category", "account" | "category">;
    sortKey: import("vue").Ref<string, string>;
    sortOrder: import("vue").Ref<"desc" | "asc", "desc" | "asc">;
    filteredTransactions: import("vue").ComputedRef<{
        tagIds: string[];
        payee: string;
        counterTransactionId: string | null;
        planningTransactionId: string | null;
        isReconciliation: boolean;
        runningBalance: number;
        transferToAccountId?: string | null | undefined;
        updated_at?: string | undefined;
        createdAt?: string | undefined;
        updatedAt?: string | undefined;
        id: string;
        accountId: string;
        categoryId?: string | undefined;
        recipientId?: string | undefined;
        date: string;
        valueDate: string;
        amount: number;
        description: string;
        note?: string | undefined;
        type: TransactionType;
        isCategoryTransfer?: boolean | undefined;
        reconciled?: boolean | undefined;
        toCategoryId?: string | undefined;
    }[]>;
    filteredCategoryTransactions: import("vue").ComputedRef<{
        tagIds: string[];
        payee: string;
        counterTransactionId: string | null;
        planningTransactionId: string | null;
        isReconciliation: boolean;
        runningBalance: number;
        transferToAccountId?: string | null | undefined;
        updated_at?: string | undefined;
        createdAt?: string | undefined;
        updatedAt?: string | undefined;
        id: string;
        accountId: string;
        categoryId?: string | undefined;
        recipientId?: string | undefined;
        date: string;
        valueDate: string;
        amount: number;
        description: string;
        note?: string | undefined;
        type: TransactionType;
        isCategoryTransfer?: boolean | undefined;
        reconciled?: boolean | undefined;
        toCategoryId?: string | undefined;
    }[]>;
    sortedTransactions: import("vue").ComputedRef<{
        tagIds: string[];
        payee: string;
        counterTransactionId: string | null;
        planningTransactionId: string | null;
        isReconciliation: boolean;
        runningBalance: number;
        transferToAccountId?: string | null | undefined;
        updated_at?: string | undefined;
        createdAt?: string | undefined;
        updatedAt?: string | undefined;
        id: string;
        accountId: string;
        categoryId?: string | undefined;
        recipientId?: string | undefined;
        date: string;
        valueDate: string;
        amount: number;
        description: string;
        note?: string | undefined;
        type: TransactionType;
        isCategoryTransfer?: boolean | undefined;
        reconciled?: boolean | undefined;
        toCategoryId?: string | undefined;
    }[]>;
    sortedCategoryTransactions: import("vue").ComputedRef<{
        tagIds: string[];
        payee: string;
        counterTransactionId: string | null;
        planningTransactionId: string | null;
        isReconciliation: boolean;
        runningBalance: number;
        transferToAccountId?: string | null | undefined;
        updated_at?: string | undefined;
        createdAt?: string | undefined;
        updatedAt?: string | undefined;
        id: string;
        accountId: string;
        categoryId?: string | undefined;
        recipientId?: string | undefined;
        date: string;
        valueDate: string;
        amount: number;
        description: string;
        note?: string | undefined;
        type: TransactionType;
        isCategoryTransfer?: boolean | undefined;
        reconciled?: boolean | undefined;
        toCategoryId?: string | undefined;
    }[]>;
    saveFilters: () => void;
    loadFilters: () => void;
    clearFilters: () => void;
    updateDateRange: (start: string, end: string) => void;
    setSortKey: (key: string) => void;
}, "saveFilters" | "loadFilters" | "clearFilters" | "updateDateRange" | "setSortKey">>;
