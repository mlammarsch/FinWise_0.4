/**
 * Pfad: src/stores/transactionStore.ts
 * Transaktionen â€“ jetzt tenant-spezifisch persistiert.
 */
import { Transaction } from '@/types';
export interface ExtendedTransaction extends Transaction {
    tagIds: string[];
    payee: string;
    counterTransactionId: string | null;
    planningTransactionId: string | null;
    isReconciliation: boolean;
    runningBalance: number;
    transferToAccountId?: string | null;
    updated_at?: string;
    createdAt?: string;
    updatedAt?: string;
}
export declare const useTransactionStore: import("pinia").StoreDefinition<"transaction", Pick<{
    transactions: import("vue").Ref<{
        tagIds: string[];
        payee: string;
        counterTransactionId: string | null;
        planningTransactionId: string | null;
        isReconciliation: boolean;
        runningBalance: number;
        transferToAccountId?: string | null | undefined;
        updated_at?: string | undefined;
        createdAt?: string | undefined;
        updatedAt?: string | undefined;
        id: string;
        accountId: string;
        categoryId?: string | undefined;
        recipientId?: string | undefined;
        date: string;
        valueDate: string;
        amount: number;
        description: string;
        note?: string | undefined;
        type: import("@/types").TransactionType;
        isCategoryTransfer?: boolean | undefined;
        reconciled?: boolean | undefined;
        toCategoryId?: string | undefined;
    }[], ExtendedTransaction[] | {
        tagIds: string[];
        payee: string;
        counterTransactionId: string | null;
        planningTransactionId: string | null;
        isReconciliation: boolean;
        runningBalance: number;
        transferToAccountId?: string | null | undefined;
        updated_at?: string | undefined;
        createdAt?: string | undefined;
        updatedAt?: string | undefined;
        id: string;
        accountId: string;
        categoryId?: string | undefined;
        recipientId?: string | undefined;
        date: string;
        valueDate: string;
        amount: number;
        description: string;
        note?: string | undefined;
        type: import("@/types").TransactionType;
        isCategoryTransfer?: boolean | undefined;
        reconciled?: boolean | undefined;
        toCategoryId?: string | undefined;
    }[]>;
    getTransactionById: import("vue").ComputedRef<(id: string) => {
        tagIds: string[];
        payee: string;
        counterTransactionId: string | null;
        planningTransactionId: string | null;
        isReconciliation: boolean;
        runningBalance: number;
        transferToAccountId?: string | null | undefined;
        updated_at?: string | undefined;
        createdAt?: string | undefined;
        updatedAt?: string | undefined;
        id: string;
        accountId: string;
        categoryId?: string | undefined;
        recipientId?: string | undefined;
        date: string;
        valueDate: string;
        amount: number;
        description: string;
        note?: string | undefined;
        type: import("@/types").TransactionType;
        isCategoryTransfer?: boolean | undefined;
        reconciled?: boolean | undefined;
        toCategoryId?: string | undefined;
    } | undefined>;
    getTransactionsByAccount: import("vue").ComputedRef<(accountId: string) => {
        tagIds: string[];
        payee: string;
        counterTransactionId: string | null;
        planningTransactionId: string | null;
        isReconciliation: boolean;
        runningBalance: number;
        transferToAccountId?: string | null | undefined;
        updated_at?: string | undefined;
        createdAt?: string | undefined;
        updatedAt?: string | undefined;
        id: string;
        accountId: string;
        categoryId?: string | undefined;
        recipientId?: string | undefined;
        date: string;
        valueDate: string;
        amount: number;
        description: string;
        note?: string | undefined;
        type: import("@/types").TransactionType;
        isCategoryTransfer?: boolean | undefined;
        reconciled?: boolean | undefined;
        toCategoryId?: string | undefined;
    }[]>;
    getTransactionsByCategory: import("vue").ComputedRef<(categoryId: string) => {
        tagIds: string[];
        payee: string;
        counterTransactionId: string | null;
        planningTransactionId: string | null;
        isReconciliation: boolean;
        runningBalance: number;
        transferToAccountId?: string | null | undefined;
        updated_at?: string | undefined;
        createdAt?: string | undefined;
        updatedAt?: string | undefined;
        id: string;
        accountId: string;
        categoryId?: string | undefined;
        recipientId?: string | undefined;
        date: string;
        valueDate: string;
        amount: number;
        description: string;
        note?: string | undefined;
        type: import("@/types").TransactionType;
        isCategoryTransfer?: boolean | undefined;
        reconciled?: boolean | undefined;
        toCategoryId?: string | undefined;
    }[]>;
    getRecentTransactions: (limit?: number) => {
        tagIds: string[];
        payee: string;
        counterTransactionId: string | null;
        planningTransactionId: string | null;
        isReconciliation: boolean;
        runningBalance: number;
        transferToAccountId?: string | null | undefined;
        updated_at?: string | undefined;
        createdAt?: string | undefined;
        updatedAt?: string | undefined;
        id: string;
        accountId: string;
        categoryId?: string | undefined;
        recipientId?: string | undefined;
        date: string;
        valueDate: string;
        amount: number;
        description: string;
        note?: string | undefined;
        type: import("@/types").TransactionType;
        isCategoryTransfer?: boolean | undefined;
        reconciled?: boolean | undefined;
        toCategoryId?: string | undefined;
    }[];
    addTransaction: (tx: ExtendedTransaction, fromSync?: boolean) => Promise<ExtendedTransaction>;
    addMultipleTransactions: (txs: ExtendedTransaction[], fromSync?: boolean) => Promise<ExtendedTransaction[]>;
    updateTransaction: (id: string, updates: Partial<ExtendedTransaction>, fromSync?: boolean) => Promise<boolean>;
    deleteTransaction: (id: string, fromSync?: boolean) => Promise<boolean>;
    loadTransactions: () => Promise<void>;
    reset: () => Promise<void>;
    initializeStore: () => Promise<void>;
    startBatchUpdate: () => void;
    endBatchUpdate: () => void;
    isInBatchMode: () => boolean;
}, "transactions">, Pick<{
    transactions: import("vue").Ref<{
        tagIds: string[];
        payee: string;
        counterTransactionId: string | null;
        planningTransactionId: string | null;
        isReconciliation: boolean;
        runningBalance: number;
        transferToAccountId?: string | null | undefined;
        updated_at?: string | undefined;
        createdAt?: string | undefined;
        updatedAt?: string | undefined;
        id: string;
        accountId: string;
        categoryId?: string | undefined;
        recipientId?: string | undefined;
        date: string;
        valueDate: string;
        amount: number;
        description: string;
        note?: string | undefined;
        type: import("@/types").TransactionType;
        isCategoryTransfer?: boolean | undefined;
        reconciled?: boolean | undefined;
        toCategoryId?: string | undefined;
    }[], ExtendedTransaction[] | {
        tagIds: string[];
        payee: string;
        counterTransactionId: string | null;
        planningTransactionId: string | null;
        isReconciliation: boolean;
        runningBalance: number;
        transferToAccountId?: string | null | undefined;
        updated_at?: string | undefined;
        createdAt?: string | undefined;
        updatedAt?: string | undefined;
        id: string;
        accountId: string;
        categoryId?: string | undefined;
        recipientId?: string | undefined;
        date: string;
        valueDate: string;
        amount: number;
        description: string;
        note?: string | undefined;
        type: import("@/types").TransactionType;
        isCategoryTransfer?: boolean | undefined;
        reconciled?: boolean | undefined;
        toCategoryId?: string | undefined;
    }[]>;
    getTransactionById: import("vue").ComputedRef<(id: string) => {
        tagIds: string[];
        payee: string;
        counterTransactionId: string | null;
        planningTransactionId: string | null;
        isReconciliation: boolean;
        runningBalance: number;
        transferToAccountId?: string | null | undefined;
        updated_at?: string | undefined;
        createdAt?: string | undefined;
        updatedAt?: string | undefined;
        id: string;
        accountId: string;
        categoryId?: string | undefined;
        recipientId?: string | undefined;
        date: string;
        valueDate: string;
        amount: number;
        description: string;
        note?: string | undefined;
        type: import("@/types").TransactionType;
        isCategoryTransfer?: boolean | undefined;
        reconciled?: boolean | undefined;
        toCategoryId?: string | undefined;
    } | undefined>;
    getTransactionsByAccount: import("vue").ComputedRef<(accountId: string) => {
        tagIds: string[];
        payee: string;
        counterTransactionId: string | null;
        planningTransactionId: string | null;
        isReconciliation: boolean;
        runningBalance: number;
        transferToAccountId?: string | null | undefined;
        updated_at?: string | undefined;
        createdAt?: string | undefined;
        updatedAt?: string | undefined;
        id: string;
        accountId: string;
        categoryId?: string | undefined;
        recipientId?: string | undefined;
        date: string;
        valueDate: string;
        amount: number;
        description: string;
        note?: string | undefined;
        type: import("@/types").TransactionType;
        isCategoryTransfer?: boolean | undefined;
        reconciled?: boolean | undefined;
        toCategoryId?: string | undefined;
    }[]>;
    getTransactionsByCategory: import("vue").ComputedRef<(categoryId: string) => {
        tagIds: string[];
        payee: string;
        counterTransactionId: string | null;
        planningTransactionId: string | null;
        isReconciliation: boolean;
        runningBalance: number;
        transferToAccountId?: string | null | undefined;
        updated_at?: string | undefined;
        createdAt?: string | undefined;
        updatedAt?: string | undefined;
        id: string;
        accountId: string;
        categoryId?: string | undefined;
        recipientId?: string | undefined;
        date: string;
        valueDate: string;
        amount: number;
        description: string;
        note?: string | undefined;
        type: import("@/types").TransactionType;
        isCategoryTransfer?: boolean | undefined;
        reconciled?: boolean | undefined;
        toCategoryId?: string | undefined;
    }[]>;
    getRecentTransactions: (limit?: number) => {
        tagIds: string[];
        payee: string;
        counterTransactionId: string | null;
        planningTransactionId: string | null;
        isReconciliation: boolean;
        runningBalance: number;
        transferToAccountId?: string | null | undefined;
        updated_at?: string | undefined;
        createdAt?: string | undefined;
        updatedAt?: string | undefined;
        id: string;
        accountId: string;
        categoryId?: string | undefined;
        recipientId?: string | undefined;
        date: string;
        valueDate: string;
        amount: number;
        description: string;
        note?: string | undefined;
        type: import("@/types").TransactionType;
        isCategoryTransfer?: boolean | undefined;
        reconciled?: boolean | undefined;
        toCategoryId?: string | undefined;
    }[];
    addTransaction: (tx: ExtendedTransaction, fromSync?: boolean) => Promise<ExtendedTransaction>;
    addMultipleTransactions: (txs: ExtendedTransaction[], fromSync?: boolean) => Promise<ExtendedTransaction[]>;
    updateTransaction: (id: string, updates: Partial<ExtendedTransaction>, fromSync?: boolean) => Promise<boolean>;
    deleteTransaction: (id: string, fromSync?: boolean) => Promise<boolean>;
    loadTransactions: () => Promise<void>;
    reset: () => Promise<void>;
    initializeStore: () => Promise<void>;
    startBatchUpdate: () => void;
    endBatchUpdate: () => void;
    isInBatchMode: () => boolean;
}, "getTransactionById" | "getTransactionsByAccount" | "getTransactionsByCategory">, Pick<{
    transactions: import("vue").Ref<{
        tagIds: string[];
        payee: string;
        counterTransactionId: string | null;
        planningTransactionId: string | null;
        isReconciliation: boolean;
        runningBalance: number;
        transferToAccountId?: string | null | undefined;
        updated_at?: string | undefined;
        createdAt?: string | undefined;
        updatedAt?: string | undefined;
        id: string;
        accountId: string;
        categoryId?: string | undefined;
        recipientId?: string | undefined;
        date: string;
        valueDate: string;
        amount: number;
        description: string;
        note?: string | undefined;
        type: import("@/types").TransactionType;
        isCategoryTransfer?: boolean | undefined;
        reconciled?: boolean | undefined;
        toCategoryId?: string | undefined;
    }[], ExtendedTransaction[] | {
        tagIds: string[];
        payee: string;
        counterTransactionId: string | null;
        planningTransactionId: string | null;
        isReconciliation: boolean;
        runningBalance: number;
        transferToAccountId?: string | null | undefined;
        updated_at?: string | undefined;
        createdAt?: string | undefined;
        updatedAt?: string | undefined;
        id: string;
        accountId: string;
        categoryId?: string | undefined;
        recipientId?: string | undefined;
        date: string;
        valueDate: string;
        amount: number;
        description: string;
        note?: string | undefined;
        type: import("@/types").TransactionType;
        isCategoryTransfer?: boolean | undefined;
        reconciled?: boolean | undefined;
        toCategoryId?: string | undefined;
    }[]>;
    getTransactionById: import("vue").ComputedRef<(id: string) => {
        tagIds: string[];
        payee: string;
        counterTransactionId: string | null;
        planningTransactionId: string | null;
        isReconciliation: boolean;
        runningBalance: number;
        transferToAccountId?: string | null | undefined;
        updated_at?: string | undefined;
        createdAt?: string | undefined;
        updatedAt?: string | undefined;
        id: string;
        accountId: string;
        categoryId?: string | undefined;
        recipientId?: string | undefined;
        date: string;
        valueDate: string;
        amount: number;
        description: string;
        note?: string | undefined;
        type: import("@/types").TransactionType;
        isCategoryTransfer?: boolean | undefined;
        reconciled?: boolean | undefined;
        toCategoryId?: string | undefined;
    } | undefined>;
    getTransactionsByAccount: import("vue").ComputedRef<(accountId: string) => {
        tagIds: string[];
        payee: string;
        counterTransactionId: string | null;
        planningTransactionId: string | null;
        isReconciliation: boolean;
        runningBalance: number;
        transferToAccountId?: string | null | undefined;
        updated_at?: string | undefined;
        createdAt?: string | undefined;
        updatedAt?: string | undefined;
        id: string;
        accountId: string;
        categoryId?: string | undefined;
        recipientId?: string | undefined;
        date: string;
        valueDate: string;
        amount: number;
        description: string;
        note?: string | undefined;
        type: import("@/types").TransactionType;
        isCategoryTransfer?: boolean | undefined;
        reconciled?: boolean | undefined;
        toCategoryId?: string | undefined;
    }[]>;
    getTransactionsByCategory: import("vue").ComputedRef<(categoryId: string) => {
        tagIds: string[];
        payee: string;
        counterTransactionId: string | null;
        planningTransactionId: string | null;
        isReconciliation: boolean;
        runningBalance: number;
        transferToAccountId?: string | null | undefined;
        updated_at?: string | undefined;
        createdAt?: string | undefined;
        updatedAt?: string | undefined;
        id: string;
        accountId: string;
        categoryId?: string | undefined;
        recipientId?: string | undefined;
        date: string;
        valueDate: string;
        amount: number;
        description: string;
        note?: string | undefined;
        type: import("@/types").TransactionType;
        isCategoryTransfer?: boolean | undefined;
        reconciled?: boolean | undefined;
        toCategoryId?: string | undefined;
    }[]>;
    getRecentTransactions: (limit?: number) => {
        tagIds: string[];
        payee: string;
        counterTransactionId: string | null;
        planningTransactionId: string | null;
        isReconciliation: boolean;
        runningBalance: number;
        transferToAccountId?: string | null | undefined;
        updated_at?: string | undefined;
        createdAt?: string | undefined;
        updatedAt?: string | undefined;
        id: string;
        accountId: string;
        categoryId?: string | undefined;
        recipientId?: string | undefined;
        date: string;
        valueDate: string;
        amount: number;
        description: string;
        note?: string | undefined;
        type: import("@/types").TransactionType;
        isCategoryTransfer?: boolean | undefined;
        reconciled?: boolean | undefined;
        toCategoryId?: string | undefined;
    }[];
    addTransaction: (tx: ExtendedTransaction, fromSync?: boolean) => Promise<ExtendedTransaction>;
    addMultipleTransactions: (txs: ExtendedTransaction[], fromSync?: boolean) => Promise<ExtendedTransaction[]>;
    updateTransaction: (id: string, updates: Partial<ExtendedTransaction>, fromSync?: boolean) => Promise<boolean>;
    deleteTransaction: (id: string, fromSync?: boolean) => Promise<boolean>;
    loadTransactions: () => Promise<void>;
    reset: () => Promise<void>;
    initializeStore: () => Promise<void>;
    startBatchUpdate: () => void;
    endBatchUpdate: () => void;
    isInBatchMode: () => boolean;
}, "reset" | "getRecentTransactions" | "addTransaction" | "addMultipleTransactions" | "updateTransaction" | "deleteTransaction" | "loadTransactions" | "initializeStore" | "startBatchUpdate" | "endBatchUpdate" | "isInBatchMode">>;
